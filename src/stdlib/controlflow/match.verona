// Copyright Microsoft and Project Verona Contributors.
// SPDX-License-Identifier: MIT
using "boolean";

// `as` returns `value` as type T if that's possible. Otherwise, it throws
// NoMatch.
as[T, U](value: U): T | throw NoMatch
{
  match value
  {
    { x: T => x }
    { throw NoMatch }
  }
}

// `OrEquals` is used by `|` to build a pattern that can match two things.
class OrEquals[T1, T2]
{
  a: Equatable[T1];
  b: Equatable[T2];

  create[R: OrEquals[T1, T2]](a: R~>Equatable[T1], b: R~>Equatable[T2]): R
  {
    new (a, b)
  }

  ==(self: OrEquals[T1, T2], x: T1 | T2): Bool
  {
    match x
    {
      { y: T1 => self.a == y }
      { y: T2 => self.b == y }
      { false }
    }
  }
}

// `|` builds a pattern that can match two things.
|[T1, T2](e1: Equatable[T1], e2: Equatable[T2]): OrEquals[T1, T2]
{
  OrEquals(e1, e2)
}
