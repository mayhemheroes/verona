(class
  ()
  []
  ()
  [
    (class
      $module-0
      []
      ()
      [
        (using (typeref [ (modulename $module-1 []) ]))
        (using (typeref [ (modulename $module-2 []) ]))
        (interface Foo [] () [])
        (function
          f
          (lambda
            []
            []
            ()
            [
              (let bool1)
              (let $0)
              (assign (ref $0) (bool true))
              (assign (ref bool1) (ref $0))
              (let bool2)
              (let $1)
              (assign (ref $1) (bool false))
              (assign (ref bool2) (ref $1))
              (let int1)
              (let $2)
              (assign (ref $2) (int 00_42))
              (assign (ref int1) (ref $2))
              (let int2)
              (let $3)
              (assign (ref $3) (hex 0xc0_FFeE))
              (assign (ref int2) (ref $3))
              (let int3)
              (let $4)
              (assign (ref $4) (binary 0b10_10_10))
              (assign (ref int3) (ref $4))
              (let float1)
              (let $5)
              (assign (ref $5) (float 27.18e-1))
              (assign (ref float1) (ref $5))
              (let precedence1)
              (let $6)
              (assign (ref $6) (int 1))
              (let $7)
              (assign (ref $7) (int 2))
              (let $8)
              (assign (ref $8) (select (ref $6) [ (typename + []) ] (ref $7)))
              (let $9)
              (assign (ref $9) (int 3))
              (let $10)
              (assign (ref $10) (select (ref $8) [ (typename + []) ] (ref $9)))
              (assign (ref precedence1) (ref $10))
              (let precedence2)
              (let $11)
              (assign (ref $11) (int 1))
              (let $12)
              (assign (ref $12) (int 2))
              (let $13)
              (assign (ref $13) (int 3))
              (let $14)
              (assign
                (ref $14)
                (select (ref $12) [ (typename + []) ] (ref $13)))
              (let $15)
              (assign
                (ref $15)
                (select (ref $11) [ (typename + []) ] (ref $14)))
              (assign (ref precedence2) (ref $15))
              (let object1)
              (let $17)
              (assign
                (ref $17)
                (lambda
                  []
                  []
                  ()
                  [ (let $16) (assign (ref $16) (int 0)) (ref $16) ]))
              (let $18)
              (assign
                (ref $18)
                (object
                  ()
                  ()
                  [ (field x (typeref [ (typename U64 []) ]) (ref $17)) ]))
              (assign (ref object1) (ref $18))
              (let object2)
              (let $20)
              (assign
                (ref $20)
                (lambda
                  []
                  []
                  ()
                  [ (let $19) (assign (ref $19) (int 0)) (ref $19) ]))
              (let $21)
              (assign
                (ref $21)
                (object
                  ()
                  (typeref [ (typename Foo []) ])
                  [ (field x (typeref [ (typename U64 []) ]) (ref $20)) ]))
              (assign (ref object2) (ref $21))
              (let bool3)
              (oftype (ref bool3) (typeref [ (typename Bool []) ]))
              (let $22)
              (assign (ref $22) (bool true))
              (assign (ref bool3) (ref $22))
              (let bool4)
              (oftype (ref bool4) (typeref [ (typename Bool []) ]))
              (let $23)
              (assign (ref $23) (bool false))
              (assign (ref bool4) (ref $23))
              (let int4)
              (oftype (ref int4) (typeref [ (typename U16 []) ]))
              (let $24)
              (assign (ref $24) (int 00_420))
              (assign (ref int4) (ref $24))
              (let int5)
              (oftype (ref int5) (typeref [ (typename I32 []) ]))
              (let $25)
              (assign (ref $25) (hex 0xc0_FFeE))
              (assign (ref int5) (ref $25))
              (let int6)
              (oftype (ref int6) (typeref [ (typename U8 []) ]))
              (let $26)
              (assign (ref $26) (binary 0b100_10_10))
              (assign (ref int6) (ref $26))
              (let float2)
              (oftype (ref float2) (typeref [ (typename F32 []) ]))
              (let $27)
              (assign (ref $27) (float 207.18e-1))
              (assign (ref float2) (ref $27))
              (let $28)
              (assign (ref $28) (bool false))
              (ref $28)
            ]))
      ])
    (class
      $module-1
      []
      ()
      [
        (class
          Bool
          []
          ()
          [
            (function
              apply
              (lambda
                []
                [ (param self (typeref [ (typename Bool []) ]) ()) ]
                (typeref [ (typename Bool []) ])
                [ (ref self) ]))
            (function
              bool
              (lambda
                []
                [ (param self (typeref [ (typename Bool []) ]) ()) ]
                (typeref [ (typename Bool []) ])
                [ (ref self) ]))
          ])
        (interface
          ToBool
          []
          ()
          [
            (function
              bool
              (lambda
                []
                [ (param self (Self ) ()) ]
                (typeref [ (typename Bool []) ])
                []))
          ])
        (function
          and
          (lambda
            [
              (typeparam T (typeref [ (typename ToBool []) ]) ())
              (typeparam U () ())
            ]
            [
              (param a (typeref [ (typename T []) ]) ())
              (param
                b
                (functiontype (tupletype []) (typeref [ (typename U []) ]))
                ())
            ]
            (uniontype
              [ (typeref [ (typename T []) ]) (typeref [ (typename U []) ]) ])
            [
              (let $0)
              (assign (ref $0) (select () [ (typename bool []) ] (ref a)))
              (let $4)
              (assign
                (ref $4)
                (lambda
                  []
                  [ (param $1 () ()) ]
                  ()
                  [
                    (let $2)
                    (assign
                      (ref $2)
                      (select (param $1 () ()) [ (typename == []) ] (ref $1)))
                    (let $3)
                    (assign
                      (ref $3)
                      (select () [ (typename requires []) ] (ref $2)))
                    (free a)
                    (ref a)
                  ]))
              (let $9)
              (assign
                (ref $9)
                (lambda
                  []
                  [ (param $5 () ()) ]
                  ()
                  [
                    (let $6)
                    (assign
                      (ref $6)
                      (select (param $5 () ()) [ (typename == []) ] (ref $5)))
                    (let $7)
                    (assign
                      (ref $7)
                      (select () [ (typename requires []) ] (ref $6)))
                    (free b)
                    (let $8)
                    (assign
                      (ref $8)
                      (select (ref b) [ (typename apply []) ] ()))
                    (ref $8)
                  ]))
              (let $10)
              (assign (ref $10) (match (ref $0) [ (ref $4) (ref $9) ]))
              (ref $10)
            ]))
        (function
          or
          (lambda
            [
              (typeparam T (typeref [ (typename ToBool []) ]) ())
              (typeparam U () ())
            ]
            [
              (param a (typeref [ (typename T []) ]) ())
              (param
                b
                (functiontype (tupletype []) (typeref [ (typename U []) ]))
                ())
            ]
            (uniontype
              [ (typeref [ (typename T []) ]) (typeref [ (typename U []) ]) ])
            [
              (let $0)
              (assign (ref $0) (select () [ (typename bool []) ] (ref a)))
              (let $4)
              (assign
                (ref $4)
                (lambda
                  []
                  [ (param $1 () ()) ]
                  ()
                  [
                    (let $2)
                    (assign
                      (ref $2)
                      (select (param $1 () ()) [ (typename == []) ] (ref $1)))
                    (let $3)
                    (assign
                      (ref $3)
                      (select () [ (typename requires []) ] (ref $2)))
                    (free a)
                    (ref a)
                  ]))
              (let $9)
              (assign
                (ref $9)
                (lambda
                  []
                  [ (param $5 () ()) ]
                  ()
                  [
                    (let $6)
                    (assign
                      (ref $6)
                      (select (param $5 () ()) [ (typename == []) ] (ref $5)))
                    (let $7)
                    (assign
                      (ref $7)
                      (select () [ (typename requires []) ] (ref $6)))
                    (free b)
                    (let $8)
                    (assign
                      (ref $8)
                      (select (ref b) [ (typename apply []) ] ()))
                    (ref $8)
                  ]))
              (let $10)
              (assign (ref $10) (match (ref $0) [ (ref $4) (ref $9) ]))
              (ref $10)
            ]))
        (function
          not
          (lambda
            [ (typeparam T (typeref [ (typename ToBool []) ]) ()) ]
            [ (param a (typeref [ (typename T []) ]) ()) ]
            (typeref [ (typename Bool []) ])
            [
              (let $0)
              (assign (ref $0) (select () [ (typename bool []) ] (ref a)))
              (let $5)
              (assign
                (ref $5)
                (lambda
                  []
                  [ (param $1 () ()) ]
                  ()
                  [
                    (let $2)
                    (assign
                      (ref $2)
                      (select (param $1 () ()) [ (typename == []) ] (ref $1)))
                    (let $3)
                    (assign
                      (ref $3)
                      (select () [ (typename requires []) ] (ref $2)))
                    (let $4)
                    (assign (ref $4) (bool false))
                    (ref $4)
                  ]))
              (let $10)
              (assign
                (ref $10)
                (lambda
                  []
                  [ (param $6 () ()) ]
                  ()
                  [
                    (let $7)
                    (assign
                      (ref $7)
                      (select (param $6 () ()) [ (typename == []) ] (ref $6)))
                    (let $8)
                    (assign
                      (ref $8)
                      (select () [ (typename requires []) ] (ref $7)))
                    (let $9)
                    (assign (ref $9) (bool true))
                    (ref $9)
                  ]))
              (let $11)
              (assign (ref $11) (match (ref $0) [ (ref $5) (ref $10) ]))
              (ref $11)
            ]))
        (class Less [] () [])
        (class Equal [] () [])
        (class Greater [] () [])
        (typealias
          Compare
          []
          (uniontype
            [
              (typeref [ (typename Less []) ])
              (typeref [ (typename Equal []) ])
              (typeref [ (typename Greater []) ])
            ]))
        (interface
          Equatable
          [ (typeparam T () ()) ]
          ()
          [
            (function
              ==
              (lambda
                []
                [
                  (param self (Self ) ())
                  (param other (typeref [ (typename T []) ]) ())
                ]
                (typeref [ (typename Bool []) ])
                []))
            (function
              !=
              (lambda
                []
                [
                  (param self (Self ) ())
                  (param other (typeref [ (typename T []) ]) ())
                ]
                (typeref [ (typename Bool []) ])
                [
                  (let $0)
                  (assign
                    (ref $0)
                    (select (ref self) [ (typename == []) ] (ref other)))
                  (let $1)
                  (assign (ref $1) (select () [ (typename not []) ] (ref $0)))
                  (ref $1)
                ]))
          ])
        (interface
          Comparable
          [ (typeparam T () ()) ]
          (typeref [ (typename Equatable [ (typeref [ (typename T []) ]) ]) ])
          [
            (function
              <
              (lambda
                []
                [
                  (param self (Self ) ())
                  (param other (typeref [ (typename T []) ]) ())
                ]
                (typeref [ (typename Bool []) ])
                []))
            (function
              <=
              (lambda
                []
                [
                  (param self (Self ) ())
                  (param other (typeref [ (typename T []) ]) ())
                ]
                (typeref [ (typename Bool []) ])
                [
                  (let $0)
                  (assign
                    (ref $0)
                    (select (ref self) [ (typename < []) ] (ref other)))
                  (let $1)
                  (assign
                    (ref $1)
                    (select (ref self) [ (typename == []) ] (ref other)))
                  (let $2)
                  (assign
                    (ref $2)
                    (select (ref $0) [ (typename or []) ] (ref $1)))
                  (ref $2)
                ]))
            (function
              >=
              (lambda
                []
                [
                  (param self (Self ) ())
                  (param other (typeref [ (typename T []) ]) ())
                ]
                (typeref [ (typename Bool []) ])
                [
                  (let $0)
                  (assign
                    (ref $0)
                    (select (ref self) [ (typename < []) ] (ref other)))
                  (let $1)
                  (assign (ref $1) (select () [ (typename not []) ] (ref $0)))
                  (ref $1)
                ]))
            (function
              >
              (lambda
                []
                [
                  (param self (Self ) ())
                  (param other (typeref [ (typename T []) ]) ())
                ]
                (typeref [ (typename Bool []) ])
                [
                  (let $0)
                  (assign
                    (ref $0)
                    (select (ref self) [ (typename <= []) ] (ref other)))
                  (let $1)
                  (assign (ref $1) (select () [ (typename not []) ] (ref $0)))
                  (ref $1)
                ]))
            (function
              <=>
              (lambda
                []
                [
                  (param self (Self ) ())
                  (param other (typeref [ (typename T []) ]) ())
                ]
                (typeref [ (typename Compare []) ])
                [
                  (let $0)
                  (assign
                    (ref $0)
                    (select (ref self) [ (typename < []) ] (ref other)))
                  (let $1)
                  (assign (ref $1) (select () [ (typename if []) ] (ref $0)))
                  (let $3)
                  (assign
                    (ref $3)
                    (lambda
                      []
                      []
                      ()
                      [
                        (let $2)
                        (assign
                          (ref $2)
                          (select
                            ()
                            [ (typename Less []) (typename create []) ]
                            ()))
                        (ref $2)
                      ]))
                  (let $4)
                  (assign
                    (ref $4)
                    (select (ref $1) [ (typename apply []) ] (ref $3)))
                  (let $5)
                  (assign
                    (ref $5)
                    (select (ref self) [ (typename == []) ] (ref other)))
                  (let $6)
                  (assign
                    (ref $6)
                    (select (ref $4) [ (typename elseif []) ] (ref $5)))
                  (let $8)
                  (assign
                    (ref $8)
                    (lambda
                      []
                      []
                      ()
                      [
                        (let $7)
                        (assign
                          (ref $7)
                          (select
                            ()
                            [ (typename Equal []) (typename create []) ]
                            ()))
                        (ref $7)
                      ]))
                  (let $9)
                  (assign
                    (ref $9)
                    (select (ref $6) [ (typename apply []) ] (ref $8)))
                  (let $11)
                  (assign
                    (ref $11)
                    (lambda
                      []
                      []
                      ()
                      [
                        (let $10)
                        (assign
                          (ref $10)
                          (select
                            ()
                            [ (typename Greater []) (typename create []) ]
                            ()))
                        (ref $10)
                      ]))
                  (let $12)
                  (assign
                    (ref $12)
                    (select (ref $9) [ (typename else []) ] (ref $11)))
                  (ref $12)
                ]))
          ])
      ])
    (class
      $module-2
      []
      ()
      [
        (class I8 [] () [])
        (class I16 [] () [])
        (class I32 [] () [])
        (class I64 [] () [])
        (class I128 [] () [])
        (class ISize [] () [])
        (class U8 [] () [])
        (class U16 [] () [])
        (class U32 [] () [])
        (class U64 [] () [])
        (class U128 [] () [])
        (class USize [] () [])
        (class F32 [] () [])
        (class F64 [] () [])
      ])
  ])
