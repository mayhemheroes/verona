(class
  ()
  []
  ()
  [
    (class
      $module-0
      []
      ()
      [
        (using (typeref [ (modulename $module-1 []) ]))
        (class
          C
          [ (typeparam A () ()) ]
          ()
          [
            (field f (isecttype [ (typeref [ (typename A []) ]) (mut ) ]) ())
            (function
              create
              (lambda
                [
                  (typeparam
                    S
                    (isecttype
                      [
                        (typeref
                          [ (typename C [ (typeref [ (typename A []) ]) ]) ])
                        (mut )
                      ])
                    ())
                ]
                [
                  (param
                    a
                    (extracttype
                      (typeref [ (typename S []) ])
                      (isecttype [ (typeref [ (typename A []) ]) (mut ) ]))
                    ())
                ]
                (typeref [ (typename S []) ])
                [ (let $0) (assign (ref $0) (new a (ref a))) (ref $0) ]))
          ])
        (interface Any [] () [])
        (class
          Empty
          []
          ()
          [
            (function
              create
              (lambda
                []
                []
                (typeref [ (typename Empty []) ])
                [ (let $0) (assign (ref $0) (new () ())) (ref $0) ]))
            (function
              apply
              (lambda
                []
                []
                (typeref [ (typename Empty []) ])
                [ (let $0) (assign (ref $0) (new () ())) (ref $0) ]))
          ])
        (class
          One
          []
          ()
          [
            (field a (typeref [ (typename U32 []) ]) ())
            (function
              create
              (lambda
                []
                [ (param a (typeref [ (typename U32 []) ]) ()) ]
                (typeref [ (typename One []) ])
                [ (let $0) (assign (ref $0) (new () (ref a))) (ref $0) ]))
          ])
        (class
          Two
          []
          ()
          [
            (field a (typeref [ (typename U32 []) ]) ())
            (field b (typeref [ (typename F64 []) ]) ())
            (function
              create
              (lambda
                []
                [
                  (param a (typeref [ (typename U32 []) ]) ())
                  (param b (typeref [ (typename F64 []) ]) ())
                ]
                (typeref [ (typename Two []) ])
                [
                  (let $0)
                  (assign (ref $0) (tuple [ (ref a) (ref b) ]))
                  (let $1)
                  (assign (ref $1) (new () (ref $0)))
                  (ref $1)
                ]))
          ])
        (function
          foo
          (lambda
            []
            []
            ()
            [
              (let f)
              (let $0)
              (assign
                (ref $0)
                (lambda
                  [ (typeparam A (typeref [ (typename U64 []) ]) ()) ]
                  [ (param a () ()) ]
                  ()
                  [
                    (let $0)
                    (assign (ref $0) (int 42))
                    (let $1)
                    (assign
                      (ref $1)
                      (select (ref a) [ (typename + []) ] (ref $0)))
                    (ref $1)
                  ]))
              (assign (ref f) (ref $0))
              (let e0)
              (let $1)
              (assign
                (ref $1)
                (select () [ (typename Empty []) (typename create []) ] ()))
              (assign (ref e0) (ref $1))
              (let e1)
              (let $2)
              (assign
                (ref $2)
                (select () [ (typename Empty []) (typename create []) ] ()))
              (assign (ref e1) (ref $2))
              (let e2)
              (let $3)
              (assign (ref $3) (object e (typeref [ (typename Empty []) ]) []))
              (assign (ref e2) (ref $3))
              (let one)
              (let $4)
              (assign
                (ref $4)
                (lambda
                  []
                  []
                  ()
                  [ (let $0) (assign (ref $0) (int 42)) (ref $0) ]))
              (let $5)
              (assign
                (ref $5)
                (object
                  ()
                  (typeref [ (typename One []) ])
                  [ (field a (typeref [ (typename U32 []) ]) (ref $4)) ]))
              (assign (ref one) (ref $5))
              (let two)
              (let $6)
              (assign
                (ref $6)
                (lambda
                  []
                  []
                  ()
                  [ (let $0) (assign (ref $0) (int 42)) (ref $0) ]))
              (let $7)
              (assign
                (ref $7)
                (lambda
                  []
                  []
                  ()
                  [ (let $0) (assign (ref $0) (float 3.14)) (ref $0) ]))
              (let $8)
              (assign
                (ref $8)
                (object
                  one
                  (typeref [ (typename Two []) ])
                  [
                    (field a (typeref [ (typename U32 []) ]) (ref $6))
                    (field b (typeref [ (typename F64 []) ]) (ref $7))
                  ]))
              (let $9)
              (assign (ref $9) (ref two))
              (assign (ref two) (ref $8))
              (ref $9)
            ]))
      ])
    (class
      $module-1
      []
      ()
      [
        (class I8 [] () [])
        (class I16 [] () [])
        (class I32 [] () [])
        (class I64 [] () [])
        (class I128 [] () [])
        (class ISize [] () [])
        (class U8 [] () [])
        (class U16 [] () [])
        (class U32 [] () [])
        (class U64 [] () [])
        (class U128 [] () [])
        (class USize [] () [])
        (class F32 [] () [])
        (class F64 [] () [])
      ])
  ])
