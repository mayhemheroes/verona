(class
  ()
  []
  ()
  [
    (class
      $module-0
      []
      ()
      [
        (using (typeref [ (modulename $module-1 []) ]))
        (function
          apply
          (lambda
            []
            [
              (param x (typeref [ (typename U64 []) ]) ())
              (param y (typeref [ (typename U64 []) ]) ())
            ]
            ()
            [
              (let $0 (infertype $1))
              (assign (ref $0) (string " c-string \" ðŸ˜„ -> ðŸ˜„ "))
              (let $1 (infertype $2))
              (assign
                (ref $1)
                (string
                  "    no indent $x + ${y} = ${x + y} $1\n      indent 2 spaces \"{no interp: $x}\""))
              (let $2 (infertype $3))
              (assign (ref $2) (string "\n    hi\n"))
              (let $3 (infertype $4))
              (assign (ref $3) (char "{\n  }"))
              (let tab (infertype $0))
              (let $4 (infertype $5))
              (assign (ref $4) (string "\t"))
              (assign (ref tab) (ref $4))
              (let $5 (infertype $6))
              (assign (ref $5) (string "    look, a "))
              (let $6 (infertype $7))
              (assign
                (ref $6)
                (select (ref $5) [ (typename apply []) ] (ref tab)))
              (let $7 (infertype $8))
              (assign (ref $7) (string " in my string"))
              (let $8 (infertype $9))
              (assign
                (ref $8)
                (select (ref $6) [ (typename apply []) ] (ref $7)))
              (ref $8)
            ]))
      ])
    (class
      $module-1
      []
      ()
      [
        (class
          I8
          []
          ()
          [
            (function
              create
              (lambda
                []
                []
                (isecttype [ (typeref [ (typename I8 []) ]) (imm ) ])
                [
                  (let $0 (infertype $10))
                  (assign (ref $0) (new () ()))
                  (ref $0)
                ]))
          ])
        (class
          I16
          []
          ()
          [
            (function
              create
              (lambda
                []
                []
                (isecttype [ (typeref [ (typename I16 []) ]) (imm ) ])
                [
                  (let $0 (infertype $11))
                  (assign (ref $0) (new () ()))
                  (ref $0)
                ]))
          ])
        (class
          I32
          []
          ()
          [
            (function
              create
              (lambda
                []
                []
                (isecttype [ (typeref [ (typename I32 []) ]) (imm ) ])
                [
                  (let $0 (infertype $12))
                  (assign (ref $0) (new () ()))
                  (ref $0)
                ]))
          ])
        (class
          I64
          []
          ()
          [
            (function
              create
              (lambda
                []
                []
                (isecttype [ (typeref [ (typename I64 []) ]) (imm ) ])
                [
                  (let $0 (infertype $13))
                  (assign (ref $0) (new () ()))
                  (ref $0)
                ]))
          ])
        (class
          I128
          []
          ()
          [
            (function
              create
              (lambda
                []
                []
                (isecttype [ (typeref [ (typename I128 []) ]) (imm ) ])
                [
                  (let $0 (infertype $14))
                  (assign (ref $0) (new () ()))
                  (ref $0)
                ]))
          ])
        (class
          ISize
          []
          ()
          [
            (function
              create
              (lambda
                []
                []
                (isecttype [ (typeref [ (typename ISize []) ]) (imm ) ])
                [
                  (let $0 (infertype $15))
                  (assign (ref $0) (new () ()))
                  (ref $0)
                ]))
          ])
        (typealias
          Signed
          []
          (uniontype
            [
              (typeref [ (typename I8 []) ])
              (typeref [ (typename I16 []) ])
              (typeref [ (typename I32 []) ])
              (typeref [ (typename I64 []) ])
              (typeref [ (typename I128 []) ])
              (typeref [ (typename ISize []) ])
            ])
          [])
        (class
          U8
          []
          ()
          [
            (function
              create
              (lambda
                []
                []
                (isecttype [ (typeref [ (typename U8 []) ]) (imm ) ])
                [
                  (let $0 (infertype $16))
                  (assign (ref $0) (new () ()))
                  (ref $0)
                ]))
          ])
        (class
          U16
          []
          ()
          [
            (function
              create
              (lambda
                []
                []
                (isecttype [ (typeref [ (typename U16 []) ]) (imm ) ])
                [
                  (let $0 (infertype $17))
                  (assign (ref $0) (new () ()))
                  (ref $0)
                ]))
          ])
        (class
          U32
          []
          ()
          [
            (function
              create
              (lambda
                []
                []
                (isecttype [ (typeref [ (typename U32 []) ]) (imm ) ])
                [
                  (let $0 (infertype $18))
                  (assign (ref $0) (new () ()))
                  (ref $0)
                ]))
          ])
        (class
          U64
          []
          ()
          [
            (function
              create
              (lambda
                []
                []
                (isecttype [ (typeref [ (typename U64 []) ]) (imm ) ])
                [
                  (let $0 (infertype $19))
                  (assign (ref $0) (new () ()))
                  (ref $0)
                ]))
          ])
        (class
          U128
          []
          ()
          [
            (function
              create
              (lambda
                []
                []
                (isecttype [ (typeref [ (typename U128 []) ]) (imm ) ])
                [
                  (let $0 (infertype $20))
                  (assign (ref $0) (new () ()))
                  (ref $0)
                ]))
          ])
        (class
          USize
          []
          ()
          [
            (function
              create
              (lambda
                []
                []
                (isecttype [ (typeref [ (typename USize []) ]) (imm ) ])
                [
                  (let $0 (infertype $21))
                  (assign (ref $0) (new () ()))
                  (ref $0)
                ]))
          ])
        (typealias
          Unsigned
          []
          (uniontype
            [
              (typeref [ (typename U8 []) ])
              (typeref [ (typename U16 []) ])
              (typeref [ (typename U32 []) ])
              (typeref [ (typename U64 []) ])
              (typeref [ (typename U128 []) ])
              (typeref [ (typename USize []) ])
            ])
          [])
        (typealias
          Integer
          []
          (uniontype
            [
              (typeref [ (typename Signed []) ])
              (typeref [ (typename Unsigned []) ])
            ])
          [])
        (class
          F32
          []
          ()
          [
            (function
              create
              (lambda
                []
                []
                (isecttype [ (typeref [ (typename F32 []) ]) (imm ) ])
                [
                  (let $0 (infertype $22))
                  (assign (ref $0) (new () ()))
                  (ref $0)
                ]))
          ])
        (class
          F64
          []
          ()
          [
            (function
              create
              (lambda
                []
                []
                (isecttype [ (typeref [ (typename F64 []) ]) (imm ) ])
                [
                  (let $0 (infertype $23))
                  (assign (ref $0) (new () ()))
                  (ref $0)
                ]))
          ])
        (typealias
          Float
          []
          (uniontype
            [ (typeref [ (typename F32 []) ]) (typeref [ (typename F64 []) ]) ])
          [])
      ])
  ])
