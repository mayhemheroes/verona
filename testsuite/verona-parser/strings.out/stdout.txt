(class
  ()
  []
  ()
  [
    (class
      $module-0
      []
      ()
      [
        (using (typeref [ (modulename $module-1 []) ]))
        (function
          apply
          []
          [
            (param x (typeref [ (typename U64 []) ]) ())
            (param y (typeref [ (typename U64 []) ]) ())
          ]
          ()
          (lambda
            []
            []
            [
              (let $0)
              (assign (ref $0) (string " c-string \" ðŸ˜„ -> ðŸ˜„ "))
              (let $1)
              (assign
                (ref $1)
                (string
                  "    no indent $x + ${y} = ${x + y} $1\n      indent 2 spaces \"{no interp: $x}\""))
              (let $2)
              (assign (ref $2) (string "\n    hi\n"))
              (let $3)
              (assign (ref $3) (char "{\n  }"))
              (let tab)
              (assign (ref tab) (string "\t"))
              (let $4)
              (assign (ref $4) (string "    look, a "))
              (let $5)
              (assign
                (ref $5)
                (select (ref $4) [ (typename apply []) ] (ref tab)))
              (let $6)
              (assign (ref $6) (string " in my string"))
              (let $7)
              (assign
                (ref $7)
                (select (ref $5) [ (typename apply []) ] (ref $6)))
              (ref $7)
            ]))
      ])
    (class
      $module-1
      []
      ()
      [
        (class I8 [] () [])
        (class I16 [] () [])
        (class I32 [] () [])
        (class I64 [] () [])
        (class I128 [] () [])
        (class ISize [] () [])
        (class U8 [] () [])
        (class U16 [] () [])
        (class U32 [] () [])
        (class U64 [] () [])
        (class U128 [] () [])
        (class USize [] () [])
        (class F32 [] () [])
        (class F64 [] () [])
      ])
  ])
