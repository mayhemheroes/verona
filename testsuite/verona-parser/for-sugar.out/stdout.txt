(class
  ()
  []
  ()
  [
    (class
      $module-0
      []
      ()
      [
        (using (typeref [ (modulename $module-1 []) ]))
        (using (typeref [ (modulename $module-2 []) ]))
        (class List [ (typeparam T () ()) ] () [])
        (function
          for_sum
          []
          [
            (param
              x
              (typeref [ (typename List [ (typeref [ (typename U32 []) ]) ]) ])
              ())
          ]
          (typeref [ (typename U32 []) ])
          (lambda
            []
            []
            [
              (var sum)
              (oftype (ref sum) (typeref [ (typename U32 []) ]))
              (assign (ref sum) (int 0))
              (freelet x)
              (let $0)
              (assign (ref $0) (select () [ (typename values []) ] (ref x)))
              (let $1)
              (assign (ref $1) (select () [ (typename for []) ] (ref $0)))
              (let $2)
              (assign
                (ref $2)
                (lambda
                  []
                  [ (param a () ()) ]
                  [
                    (freevar sum)
                    (assign
                      (ref sum)
                      (select (ref sum) [ (typename + []) ] (ref a)))
                    (ref sum)
                  ]))
              (let $3)
              (assign
                (ref $3)
                (select (ref $1) [ (typename apply []) ] (ref $2)))
              (let $4)
              (assign
                (ref $4)
                (select (ref $3) [ (typename apply []) ] (ref sum)))
              (ref $4)
            ]))
        (function
          while_sum
          []
          [
            (param
              x
              (typeref [ (typename List [ (typeref [ (typename U32 []) ]) ]) ])
              ())
          ]
          (typeref [ (typename U32 []) ])
          (lambda
            []
            []
            [
              (var sum)
              (oftype (ref sum) (typeref [ (typename U32 []) ]))
              (assign (ref sum) (int 0))
              (let iter)
              (freelet x)
              (assign (ref iter) (select (ref x) [ (typename values []) ] ()))
              (let $0)
              (assign
                (ref $0)
                (lambda
                  []
                  []
                  [
                    (freelet iter)
                    (let $0)
                    (assign
                      (ref $0)
                      (select (ref iter) [ (typename has_value []) ] ()))
                    (ref $0)
                  ]))
              (let $1)
              (assign (ref $1) (select () [ (typename while []) ] (ref $0)))
              (let $2)
              (assign
                (ref $2)
                (lambda
                  []
                  []
                  [
                    (let a)
                    (freelet iter)
                    (assign
                      (ref a)
                      (select (ref iter) [ (typename apply []) ] ()))
                    (let $0)
                    (assign
                      (ref $0)
                      (select () [ (typename next []) ] (ref iter)))
                    (freevar sum)
                    (assign
                      (ref sum)
                      (select (ref sum) [ (typename + []) ] (ref a)))
                    (ref sum)
                  ]))
              (let $3)
              (assign
                (ref $3)
                (select (ref $1) [ (typename apply []) ] (ref $2)))
              (let $4)
              (assign
                (ref $4)
                (select (ref $3) [ (typename apply []) ] (ref sum)))
              (ref $4)
            ]))
      ])
    (class
      $module-1
      []
      ()
      [
        (function
          for
          [
            (typeparam L () (typeref [ (typename NoLabel []) ]))
            (typeparam T () ())
            (typeparam U () ())
            (typeparam V () ())
          ]
          [
            (param
              iter
              (typeref
                [ (typename Iterator [ (typeref [ (typename T []) ]) ]) ])
              ())
          ]
          (functiontype
            (functiontype
              (typeref [ (typename T []) ])
              (uniontype
                [
                  (typeref [ (typename U []) ])
                  (throwtype (typeref [ (typename V []) ]))
                ]))
            (uniontype
              [
                (typeref [ (typename Done []) ])
                (throwtype (typeref [ (typename V []) ]))
              ]))
          (lambda
            []
            []
            [
              (let $0)
              (assign
                (ref $0)
                (lambda
                  []
                  [ (param body () ()) ]
                  [
                    (let $0)
                    (assign
                      (ref $0)
                      (lambda
                        []
                        []
                        [ (let $0) (assign (ref $0) (bool true)) (ref $0) ]))
                    (let $1)
                    (assign
                      (ref $1)
                      (select () [ (typename while []) ] (ref $0)))
                    (let $2)
                    (assign
                      (ref $2)
                      (lambda
                        []
                        []
                        [
                          (let $0)
                          (assign
                            (ref $0)
                            (lambda
                              []
                              []
                              [
                                (freelet body)
                                (freelet iter)
                                (let $0)
                                (assign
                                  (ref $0)
                                  (select (ref iter) [ (typename apply []) ] ()))
                                (let $1)
                                (assign
                                  (ref $1)
                                  (select
                                    (ref body)
                                    [ (typename apply []) ]
                                    (ref $0)))
                                (let $2)
                                (assign
                                  (ref $2)
                                  (select
                                    ()
                                    [
                                      (typename continue [])
                                      (typename create [])
                                    ]
                                    ()))
                                (ref $2)
                              ]))
                          (let $1)
                          (assign
                            (ref $1)
                            (lambda
                              []
                              [ (param $0 () ()) ]
                              [
                                (let $1)
                                (assign
                                  (ref $1)
                                  (select
                                    (param $0 () ())
                                    [ (typename == []) ]
                                    (ref $0)))
                                (let $2)
                                (assign
                                  (ref $2)
                                  (select
                                    ()
                                    [ (typename requires []) ]
                                    (ref $1)))
                                (let $3)
                                (assign
                                  (ref $3)
                                  (select
                                    ()
                                    [ (typename break []) (typename create []) ]
                                    ()))
                                (ref $3)
                              ]))
                          (let $2)
                          (assign
                            (ref $2)
                            (lambda
                              []
                              [ (param $0 () ()) ]
                              [
                                (let $1)
                                (assign
                                  (ref $1)
                                  (select
                                    (param $0 () ())
                                    [ (typename == []) ]
                                    (ref $0)))
                                (let $2)
                                (assign
                                  (ref $2)
                                  (select
                                    ()
                                    [ (typename requires []) ]
                                    (ref $1)))
                                (freelet iter)
                                (let $3)
                                (assign
                                  (ref $3)
                                  (select () [ (typename next []) ] (ref iter)))
                                (ref $3)
                              ]))
                          (let $3)
                          (assign (ref $3) (try (ref $0) [ (ref $1) (ref $2) ]))
                          (ref $3)
                        ]))
                    (let $3)
                    (assign
                      (ref $3)
                      (select (ref $1) [ (typename apply []) ] (ref $2)))
                    (ref $3)
                  ]))
              (ref $0)
            ]))
        (using (typeref [ (modulename $module-3 []) ]))
        (using (typeref [ (modulename $module-4 []) ]))
        (class Empty [] () [])
        (interface
          Iterator
          [ (typeparam T () ()) ]
          ()
          [
            (function
              apply
              [ (typeparam S (isecttype [ (Self ) (mut ) ]) ()) ]
              [ (param self (typeref [ (typename S []) ]) ()) ]
              (uniontype
                [
                  (viewtype
                    (typeref [ (typename S []) ])
                    (typeref [ (typename T []) ]))
                  (throwtype (typeref [ (typename Empty []) ]))
                ])
              ())
            (function
              next
              []
              [ (param self (isecttype [ (Self ) (mut ) ]) ()) ]
              ()
              ())
            (function
              filter
              [
                (typeparam
                  S
                  (isecttype
                    [
                      (typeref
                        [
                          (typename Iterator [ (typeref [ (typename T []) ]) ])
                        ])
                      (mut )
                    ])
                  ())
                (typeparam
                  R
                  (isecttype
                    [
                      (typeref
                        [ (typename Filter [ (typeref [ (typename T []) ]) ]) ])
                      (mut )
                    ])
                  ())
              ]
              [
                (param
                  self
                  (viewtype
                    (typeref [ (typename R []) ])
                    (typeref [ (typename S []) ]))
                  ())
                (param
                  f
                  (functiontype
                    (viewtype
                      (viewtype
                        (typeref [ (typename R []) ])
                        (typeref [ (typename S []) ]))
                      (typeref [ (typename T []) ]))
                    (typeref [ (typename Bool []) ]))
                  ())
              ]
              (typeref [ (typename R []) ])
              (lambda
                []
                []
                [
                  (freelet self)
                  (freelet f)
                  (let $0)
                  (assign (ref $0) (tuple [ (ref self) (ref f) ]))
                  (let $1)
                  (assign
                    (ref $1)
                    (select
                      ()
                      [ (typename Filter []) (typename create []) ]
                      (ref $0)))
                  (ref $1)
                ]))
          ])
        (class
          Repeat
          [ (typeparam T () ()) ]
          (typeref [ (typename Iterator [ (typeref [ (typename T []) ]) ]) ])
          [
            (field value (typeref [ (typename T []) ]) ())
            (function
              create
              [
                (typeparam
                  R
                  (typeref
                    [ (typename Repeat [ (typeref [ (typename T []) ]) ]) ])
                  ())
              ]
              [
                (param
                  value
                  (viewtype
                    (typeref [ (typename R []) ])
                    (typeref [ (typename T []) ]))
                  ())
              ]
              (typeref [ (typename R []) ])
              (lambda
                []
                []
                [
                  (freelet value)
                  (let $0)
                  (assign (ref $0) (new () (ref value)))
                  (ref $0)
                ]))
            (function
              apply
              [
                (typeparam
                  S
                  (isecttype
                    [
                      (typeref
                        [ (typename Repeat [ (typeref [ (typename T []) ]) ]) ])
                      (mut )
                    ])
                  ())
              ]
              [ (param self (typeref [ (typename S []) ]) ()) ]
              (viewtype
                (typeref [ (typename S []) ])
                (typeref [ (typename T []) ]))
              (lambda
                []
                []
                [
                  (freelet self)
                  (let $0)
                  (assign
                    (ref $0)
                    (select (ref self) [ (typename value []) ] ()))
                  (ref $0)
                ]))
            (function
              next
              []
              [
                (param
                  self
                  (isecttype
                    [
                      (typeref
                        [ (typename Repeat [ (typeref [ (typename T []) ]) ]) ])
                      (mut )
                    ])
                  ())
              ]
              ()
              (lambda [] [] []))
          ])
        (class
          Chain
          [ (typeparam T () ()) ]
          (typeref [ (typename Iterator [ (typeref [ (typename T []) ]) ]) ])
          [
            (field
              value
              (isecttype
                [
                  (typeref
                    [
                      (typename
                        Iterator
                        [
                          (isecttype
                            [
                              (typeref
                                [
                                  (typename
                                    Iterator
                                    [ (typeref [ (typename T []) ]) ])
                                ])
                              (mut )
                            ])
                        ])
                    ])
                  (mut )
                ])
              ())
            (function
              create
              [
                (typeparam
                  R
                  (typeref
                    [ (typename Chain [ (typeref [ (typename T []) ]) ]) ])
                  ())
              ]
              [
                (param
                  value
                  (viewtype
                    (typeref [ (typename R []) ])
                    (isecttype
                      [
                        (typeref
                          [
                            (typename
                              Iterator
                              [
                                (isecttype
                                  [
                                    (typeref
                                      [
                                        (typename
                                          Iterator
                                          [ (typeref [ (typename T []) ]) ])
                                      ])
                                    (mut )
                                  ])
                              ])
                          ])
                        (mut )
                      ]))
                  ())
              ]
              (typeref [ (typename R []) ])
              (lambda
                []
                []
                [
                  (freelet value)
                  (let $0)
                  (assign (ref $0) (new () (ref value)))
                  (ref $0)
                ]))
            (function
              apply
              [
                (typeparam
                  S
                  (isecttype
                    [
                      (typeref
                        [ (typename Chain [ (typeref [ (typename T []) ]) ]) ])
                      (mut )
                    ])
                  ())
              ]
              [ (param self (typeref [ (typename S []) ]) ()) ]
              (uniontype
                [
                  (viewtype
                    (typeref [ (typename S []) ])
                    (typeref [ (typename T []) ]))
                  (throwtype (typeref [ (typename Empty []) ]))
                ])
              (lambda
                []
                []
                [
                  (freelet self)
                  (let $0)
                  (assign
                    (ref $0)
                    (select (ref self) [ (typename value []) ] ()))
                  (let $1)
                  (assign (ref $1) (select (ref $0) [ (typename apply []) ] ()))
                  (ref $1)
                ]))
            (function
              next
              []
              [
                (param
                  self
                  (isecttype
                    [
                      (typeref
                        [ (typename Chain [ (typeref [ (typename T []) ]) ]) ])
                      (mut )
                    ])
                  ())
              ]
              ()
              (lambda
                []
                []
                [
                  (freelet self)
                  (let $0)
                  (assign
                    (ref $0)
                    (select (ref self) [ (typename value []) ] ()))
                  (let $1)
                  (assign (ref $1) (select (ref $0) [ (typename next []) ] ()))
                  (ref $1)
                ]))
          ])
        (class
          Filter
          [ (typeparam T () ()) ]
          (typeref [ (typename Iterator [ (typeref [ (typename T []) ]) ]) ])
          [
            (field
              it
              (isecttype
                [
                  (typeref
                    [ (typename Iterator [ (typeref [ (typename T []) ]) ]) ])
                  (mut )
                ])
              ())
            (field
              f
              (functiontype
                (typeref [ (typename T []) ])
                (typeref [ (typename Bool []) ]))
              ())
            (field ok (typeref [ (typename Bool []) ]) ())
            (function
              create
              []
              [
                (param
                  it
                  (isecttype
                    [
                      (typeref
                        [
                          (typename Iterator [ (typeref [ (typename T []) ]) ])
                        ])
                      (mut )
                    ])
                  ())
                (param
                  f
                  (functiontype
                    (typeref [ (typename T []) ])
                    (typeref [ (typename Bool []) ]))
                  ())
              ]
              (isecttype
                [
                  (typeref
                    [ (typename Filter [ (typeref [ (typename T []) ]) ]) ])
                  (mut )
                ])
              (lambda
                []
                []
                [
                  (freelet it)
                  (freelet f)
                  (let $0)
                  (assign (ref $0) (bool false))
                  (let $1)
                  (assign (ref $1) (tuple [ (ref it) (ref f) (ref $0) ]))
                  (let $2)
                  (assign (ref $2) (new () (ref $1)))
                  (ref $2)
                ]))
            (function
              apply
              [
                (typeparam
                  S
                  (isecttype
                    [
                      (typeref
                        [ (typename Filter [ (typeref [ (typename T []) ]) ]) ])
                      (mut )
                    ])
                  ())
              ]
              [ (param self (typeref [ (typename S []) ]) ()) ]
              (uniontype
                [
                  (viewtype
                    (typeref [ (typename S []) ])
                    (typeref [ (typename T []) ]))
                  (throwtype (typeref [ (typename Empty []) ]))
                ])
              (lambda
                []
                []
                [
                  (freelet self)
                  (let $0)
                  (assign
                    (ref $0)
                    (select (ref self) [ (typename _advance []) ] ()))
                  (let $1)
                  (assign (ref $1) (select (ref self) [ (typename it []) ] ()))
                  (ref $1)
                ]))
            (function
              next
              []
              [
                (param
                  self
                  (isecttype
                    [
                      (typeref
                        [ (typename Filter [ (typeref [ (typename T []) ]) ]) ])
                      (mut )
                    ])
                  ())
              ]
              ()
              (lambda
                []
                []
                [
                  (freelet self)
                  (let $0)
                  (assign (ref $0) (select (ref self) [ (typename it []) ] ()))
                  (let $1)
                  (assign (ref $1) (select (ref $0) [ (typename next []) ] ()))
                  (let $2)
                  (assign (ref $2) (select (ref self) [ (typename ok []) ] ()))
                  (assign (ref $2) (bool false))
                  (let $3)
                  (assign
                    (ref $3)
                    (select (ref self) [ (typename _advance []) ] ()))
                  (ref $3)
                ]))
            (function
              _advance
              []
              [ (param self (isecttype [ (Self ) (mut ) ]) ()) ]
              ()
              (lambda
                []
                []
                [
                  (freelet self)
                  (let $0)
                  (assign (ref $0) (select (ref self) [ (typename ok []) ] ()))
                  (let $1)
                  (assign (ref $1) (select () [ (typename not []) ] (ref $0)))
                  (let $2)
                  (assign (ref $2) (select () [ (typename if []) ] (ref $1)))
                  (let $3)
                  (assign
                    (ref $3)
                    (lambda
                      []
                      []
                      [
                        (let $0)
                        (assign
                          (ref $0)
                          (select (ref self) [ (typename ok []) ] ()))
                        (assign (ref $0) (bool true))
                        (let $1)
                        (assign
                          (ref $1)
                          (lambda
                            []
                            []
                            [
                              (let $0)
                              (assign
                                (ref $0)
                                (lambda
                                  []
                                  []
                                  [
                                    (let $0)
                                    (assign
                                      (ref $0)
                                      (select
                                        (ref self)
                                        [ (typename it []) ]
                                        ()))
                                    (let $1)
                                    (assign
                                      (ref $1)
                                      (select
                                        (ref self)
                                        [ (typename f []) ]
                                        (ref $0)))
                                    (let $2)
                                    (assign
                                      (ref $2)
                                      (select () [ (typename not []) ] (ref $1)))
                                    (ref $2)
                                  ]))
                              (let $1)
                              (assign
                                (ref $1)
                                (select () [ (typename while []) ] (ref $0)))
                              (let $2)
                              (assign
                                (ref $2)
                                (lambda
                                  []
                                  []
                                  [
                                    (let $0)
                                    (assign
                                      (ref $0)
                                      (select
                                        (ref self)
                                        [ (typename it []) ]
                                        ()))
                                    (let $1)
                                    (assign
                                      (ref $1)
                                      (select
                                        (ref $0)
                                        [ (typename next []) ]
                                        ()))
                                    (ref $1)
                                  ]))
                              (let $3)
                              (assign
                                (ref $3)
                                (select
                                  (ref $1)
                                  [ (typename apply []) ]
                                  (ref $2)))
                              (ref $3)
                            ]))
                        (let $2)
                        (assign (ref $2) (lambda [] [ (param Empty () ()) ] []))
                        (let $3)
                        (assign (ref $3) (try (ref $1) [ (ref $2) ]))
                        (ref $3)
                      ]))
                  (let $4)
                  (assign
                    (ref $4)
                    (select (ref $2) [ (typename apply []) ] (ref $3)))
                  (ref $4)
                ]))
          ])
        (class
          Option
          [ (typeparam T () ()) ]
          (typeref [ (typename Iterator [ (typeref [ (typename T []) ]) ]) ])
          [
            (field
              v
              (uniontype
                [
                  (typeref [ (typename T []) ])
                  (typeref [ (typename None []) ])
                ])
              ())
            (function
              create
              [
                (typeparam
                  S
                  (typeref
                    [ (typename Option [ (typeref [ (typename T []) ]) ]) ])
                  ())
              ]
              [
                (param
                  v
                  (extracttype
                    (typeref [ (typename S []) ])
                    (typeref [ (typename T []) ]))
                  ())
              ]
              (typeref [ (typename S []) ])
              (lambda
                []
                []
                [
                  (freelet v)
                  (let $0)
                  (assign (ref $0) (new () (ref v)))
                  (ref $0)
                ]))
            (function
              empty
              [
                (typeparam
                  S
                  (typeref
                    [ (typename Option [ (typeref [ (typename T []) ]) ]) ])
                  ())
              ]
              []
              (typeref [ (typename S []) ])
              (lambda
                []
                []
                [
                  (let $0)
                  (assign
                    (ref $0)
                    (select () [ (typename None []) (typename create []) ] ()))
                  (let $1)
                  (assign (ref $1) (new () (ref $0)))
                  (ref $1)
                ]))
            (function
              has_value
              []
              [
                (param
                  self
                  (typeref
                    [ (typename Option [ (typeref [ (typename T []) ]) ]) ])
                  ())
              ]
              (typeref [ (typename Bool []) ])
              (lambda
                []
                []
                [
                  (freelet self)
                  (let $0)
                  (assign (ref $0) (select (ref self) [ (typename v []) ] ()))
                  (let $1)
                  (assign
                    (ref $1)
                    (lambda
                      []
                      [ (param None () ()) ]
                      [ (let $0) (assign (ref $0) (bool false)) (ref $0) ]))
                  (let $2)
                  (assign
                    (ref $2)
                    (lambda
                      []
                      []
                      [ (let $0) (assign (ref $0) (bool true)) (ref $0) ]))
                  (let $3)
                  (assign (ref $3) (match (ref $0) [ (ref $1) (ref $2) ]))
                  (ref $3)
                ]))
            (function
              apply
              [
                (typeparam
                  S
                  (typeref
                    [ (typename Option [ (typeref [ (typename T []) ]) ]) ])
                  ())
              ]
              [ (param self (typeref [ (typename S []) ]) ()) ]
              (uniontype
                [
                  (viewtype
                    (typeref [ (typename S []) ])
                    (typeref [ (typename T []) ]))
                  (throwtype (typeref [ (typename Empty []) ]))
                ])
              (lambda
                []
                []
                [
                  (freelet self)
                  (let $0)
                  (assign (ref $0) (select (ref self) [ (typename v []) ] ()))
                  (let $1)
                  (assign
                    (ref $1)
                    (lambda
                      []
                      [
                        (param
                          v
                          (viewtype
                            (typeref [ (typename S []) ])
                            (typeref [ (typename T []) ]))
                          ())
                      ]
                      [ (ref v) ]))
                  (let $2)
                  (assign
                    (ref $2)
                    (lambda
                      []
                      []
                      [
                        (let $0)
                        (assign
                          (ref $0)
                          (select
                            ()
                            [ (typename Empty []) (typename create []) ]
                            ()))
                        (let $1)
                        (assign (ref $1) (throw (ref $0)))
                        (ref $1)
                      ]))
                  (let $3)
                  (assign (ref $3) (match (ref $0) [ (ref $1) (ref $2) ]))
                  (ref $3)
                ]))
            (function
              value_or
              [
                (typeparam
                  S
                  (typeref
                    [ (typename Option [ (typeref [ (typename T []) ]) ]) ])
                  ())
                (typeparam U () ())
              ]
              [
                (param self (typeref [ (typename S []) ]) ())
                (param default (typeref [ (typename U []) ]) ())
              ]
              (uniontype
                [
                  (viewtype
                    (typeref [ (typename S []) ])
                    (typeref [ (typename T []) ]))
                  (typeref [ (typename U []) ])
                ])
              (lambda
                []
                []
                [
                  (freelet self)
                  (let $0)
                  (assign (ref $0) (select (ref self) [ (typename v []) ] ()))
                  (let $1)
                  (assign
                    (ref $1)
                    (lambda
                      []
                      [
                        (param
                          v
                          (viewtype
                            (typeref [ (typename S []) ])
                            (typeref [ (typename T []) ]))
                          ())
                      ]
                      [ (ref v) ]))
                  (let $2)
                  (assign
                    (ref $2)
                    (lambda [] [] [ (freelet default) (ref default) ]))
                  (let $3)
                  (assign (ref $3) (match (ref $0) [ (ref $1) (ref $2) ]))
                  (ref $3)
                ]))
            (function
              extract
              [
                (typeparam
                  S
                  (isecttype
                    [
                      (typeref
                        [ (typename Option [ (typeref [ (typename T []) ]) ]) ])
                      (mut )
                    ])
                  ())
              ]
              [ (param self (typeref [ (typename S []) ]) ()) ]
              (uniontype
                [
                  (extracttype
                    (typeref [ (typename S []) ])
                    (typeref [ (typename T []) ]))
                  (throwtype (typeref [ (typename Empty []) ]))
                ])
              (lambda
                []
                []
                [
                  (freelet self)
                  (let $0)
                  (assign (ref $0) (select (ref self) [ (typename v []) ] ()))
                  (let $1)
                  (assign
                    (ref $1)
                    (lambda
                      []
                      [
                        (param
                          v
                          (extracttype
                            (typeref [ (typename S []) ])
                            (typeref [ (typename T []) ]))
                          ())
                      ]
                      [
                        (let $0)
                        (assign
                          (ref $0)
                          (select (ref self) [ (typename v []) ] ()))
                        (assign
                          (ref $0)
                          (select
                            ()
                            [ (typename None []) (typename create []) ]
                            ()))
                        (ref $0)
                      ]))
                  (let $2)
                  (assign
                    (ref $2)
                    (lambda
                      []
                      []
                      [
                        (let $0)
                        (assign
                          (ref $0)
                          (select
                            ()
                            [ (typename Empty []) (typename create []) ]
                            ()))
                        (let $1)
                        (assign (ref $1) (throw (ref $0)))
                        (ref $1)
                      ]))
                  (let $3)
                  (assign (ref $3) (match (ref $0) [ (ref $1) (ref $2) ]))
                  (ref $3)
                ]))
            (function
              extract_or
              [
                (typeparam
                  S
                  (isecttype
                    [
                      (typeref
                        [ (typename Option [ (typeref [ (typename T []) ]) ]) ])
                      (mut )
                    ])
                  ())
                (typeparam U () ())
              ]
              [
                (param self (typeref [ (typename S []) ]) ())
                (param default (typeref [ (typename U []) ]) ())
              ]
              (uniontype
                [
                  (extracttype
                    (typeref [ (typename S []) ])
                    (typeref [ (typename T []) ]))
                  (typeref [ (typename U []) ])
                ])
              (lambda
                []
                []
                [
                  (freelet self)
                  (let $0)
                  (assign (ref $0) (select (ref self) [ (typename v []) ] ()))
                  (let $1)
                  (assign
                    (ref $1)
                    (lambda
                      []
                      [
                        (param
                          v
                          (extracttype
                            (typeref [ (typename S []) ])
                            (typeref [ (typename T []) ]))
                          ())
                      ]
                      [
                        (let $0)
                        (assign
                          (ref $0)
                          (select (ref self) [ (typename v []) ] ()))
                        (assign
                          (ref $0)
                          (select
                            ()
                            [ (typename None []) (typename create []) ]
                            ()))
                        (ref $0)
                      ]))
                  (let $2)
                  (assign
                    (ref $2)
                    (lambda [] [] [ (freelet default) (ref default) ]))
                  (let $3)
                  (assign (ref $3) (match (ref $0) [ (ref $1) (ref $2) ]))
                  (ref $3)
                ]))
          ])
      ])
    (class
      $module-2
      []
      ()
      [
        (class I8 [] () [])
        (class I16 [] () [])
        (class I32 [] () [])
        (class I64 [] () [])
        (class I128 [] () [])
        (class ISize [] () [])
        (class U8 [] () [])
        (class U16 [] () [])
        (class U32 [] () [])
        (class U64 [] () [])
        (class U128 [] () [])
        (class USize [] () [])
        (class F32 [] () [])
        (class F64 [] () [])
      ])
    (class
      $module-3
      []
      ()
      [
        (class
          Bool
          []
          ()
          [
            (function
              apply
              []
              [ (param self (typeref [ (typename Bool []) ]) ()) ]
              (typeref [ (typename Bool []) ])
              (lambda [] [] [ (freelet self) (ref self) ]))
            (function
              bool
              []
              [ (param self (typeref [ (typename Bool []) ]) ()) ]
              (typeref [ (typename Bool []) ])
              (lambda [] [] [ (freelet self) (ref self) ]))
          ])
        (interface
          ToBool
          []
          ()
          [
            (function
              bool
              []
              [ (param self (Self ) ()) ]
              (typeref [ (typename Bool []) ])
              ())
          ])
        (function
          and
          [
            (typeparam T (typeref [ (typename ToBool []) ]) ())
            (typeparam U () ())
          ]
          [
            (param a (typeref [ (typename T []) ]) ())
            (param
              b
              (functiontype (tupletype []) (typeref [ (typename U []) ]))
              ())
          ]
          (uniontype
            [ (typeref [ (typename T []) ]) (typeref [ (typename U []) ]) ])
          (lambda
            []
            []
            [
              (freelet a)
              (let $0)
              (assign (ref $0) (select () [ (typename bool []) ] (ref a)))
              (let $1)
              (assign
                (ref $1)
                (lambda
                  []
                  [ (param $0 () ()) ]
                  [
                    (let $1)
                    (assign
                      (ref $1)
                      (select (param $0 () ()) [ (typename == []) ] (ref $0)))
                    (let $2)
                    (assign
                      (ref $2)
                      (select () [ (typename requires []) ] (ref $1)))
                    (ref $2)
                  ]))
              (let $2)
              (assign
                (ref $2)
                (lambda
                  []
                  [ (param $0 () ()) ]
                  [
                    (let $1)
                    (assign
                      (ref $1)
                      (select (param $0 () ()) [ (typename == []) ] (ref $0)))
                    (let $2)
                    (assign
                      (ref $2)
                      (select () [ (typename requires []) ] (ref $1)))
                    (freelet b)
                    (let $3)
                    (assign
                      (ref $3)
                      (select (ref b) [ (typename apply []) ] ()))
                    (ref $3)
                  ]))
              (let $3)
              (assign (ref $3) (match (ref $0) [ (ref $1) (ref $2) ]))
              (ref $3)
            ]))
        (function
          or
          [
            (typeparam T (typeref [ (typename ToBool []) ]) ())
            (typeparam U () ())
          ]
          [
            (param a (typeref [ (typename T []) ]) ())
            (param
              b
              (functiontype (tupletype []) (typeref [ (typename U []) ]))
              ())
          ]
          (uniontype
            [ (typeref [ (typename T []) ]) (typeref [ (typename U []) ]) ])
          (lambda
            []
            []
            [
              (freelet a)
              (let $0)
              (assign (ref $0) (select () [ (typename bool []) ] (ref a)))
              (let $1)
              (assign
                (ref $1)
                (lambda
                  []
                  [ (param $0 () ()) ]
                  [
                    (let $1)
                    (assign
                      (ref $1)
                      (select (param $0 () ()) [ (typename == []) ] (ref $0)))
                    (let $2)
                    (assign
                      (ref $2)
                      (select () [ (typename requires []) ] (ref $1)))
                    (ref $2)
                  ]))
              (let $2)
              (assign
                (ref $2)
                (lambda
                  []
                  [ (param $0 () ()) ]
                  [
                    (let $1)
                    (assign
                      (ref $1)
                      (select (param $0 () ()) [ (typename == []) ] (ref $0)))
                    (let $2)
                    (assign
                      (ref $2)
                      (select () [ (typename requires []) ] (ref $1)))
                    (freelet b)
                    (let $3)
                    (assign
                      (ref $3)
                      (select (ref b) [ (typename apply []) ] ()))
                    (ref $3)
                  ]))
              (let $3)
              (assign (ref $3) (match (ref $0) [ (ref $1) (ref $2) ]))
              (ref $3)
            ]))
        (function
          not
          [ (typeparam T (typeref [ (typename ToBool []) ]) ()) ]
          [ (param a (typeref [ (typename T []) ]) ()) ]
          (typeref [ (typename Bool []) ])
          (lambda
            []
            []
            [
              (freelet a)
              (let $0)
              (assign (ref $0) (select () [ (typename bool []) ] (ref a)))
              (let $1)
              (assign
                (ref $1)
                (lambda
                  []
                  [ (param $0 () ()) ]
                  [
                    (let $1)
                    (assign
                      (ref $1)
                      (select (param $0 () ()) [ (typename == []) ] (ref $0)))
                    (let $2)
                    (assign
                      (ref $2)
                      (select () [ (typename requires []) ] (ref $1)))
                    (let $3)
                    (assign (ref $3) (bool false))
                    (ref $3)
                  ]))
              (let $2)
              (assign
                (ref $2)
                (lambda
                  []
                  [ (param $0 () ()) ]
                  [
                    (let $1)
                    (assign
                      (ref $1)
                      (select (param $0 () ()) [ (typename == []) ] (ref $0)))
                    (let $2)
                    (assign
                      (ref $2)
                      (select () [ (typename requires []) ] (ref $1)))
                    (let $3)
                    (assign (ref $3) (bool true))
                    (ref $3)
                  ]))
              (let $3)
              (assign (ref $3) (match (ref $0) [ (ref $1) (ref $2) ]))
              (ref $3)
            ]))
        (class Less [] () [])
        (class Equal [] () [])
        (class Greater [] () [])
        (typealias
          Compare
          []
          (uniontype
            [
              (typeref [ (typename Less []) ])
              (typeref [ (typename Equal []) ])
              (typeref [ (typename Greater []) ])
            ]))
        (interface
          Equatable
          [ (typeparam T () ()) ]
          ()
          [
            (function
              ==
              []
              [
                (param self (Self ) ())
                (param other (typeref [ (typename T []) ]) ())
              ]
              (typeref [ (typename Bool []) ])
              ())
            (function
              !=
              []
              [
                (param self (Self ) ())
                (param other (typeref [ (typename T []) ]) ())
              ]
              (typeref [ (typename Bool []) ])
              (lambda
                []
                []
                [
                  (freelet self)
                  (freelet other)
                  (let $0)
                  (assign
                    (ref $0)
                    (select (ref self) [ (typename == []) ] (ref other)))
                  (let $1)
                  (assign (ref $1) (select () [ (typename not []) ] (ref $0)))
                  (ref $1)
                ]))
          ])
        (interface
          Comparable
          [ (typeparam T () ()) ]
          (typeref [ (typename Equatable [ (typeref [ (typename T []) ]) ]) ])
          [
            (function
              <
              []
              [
                (param self (Self ) ())
                (param other (typeref [ (typename T []) ]) ())
              ]
              (typeref [ (typename Bool []) ])
              ())
            (function
              <=
              []
              [
                (param self (Self ) ())
                (param other (typeref [ (typename T []) ]) ())
              ]
              (typeref [ (typename Bool []) ])
              (lambda
                []
                []
                [
                  (freelet self)
                  (freelet other)
                  (let $0)
                  (assign
                    (ref $0)
                    (select (ref self) [ (typename < []) ] (ref other)))
                  (let $1)
                  (assign
                    (ref $1)
                    (select (ref self) [ (typename == []) ] (ref other)))
                  (let $2)
                  (assign
                    (ref $2)
                    (select (ref $0) [ (typename or []) ] (ref $1)))
                  (ref $2)
                ]))
            (function
              >=
              []
              [
                (param self (Self ) ())
                (param other (typeref [ (typename T []) ]) ())
              ]
              (typeref [ (typename Bool []) ])
              (lambda
                []
                []
                [
                  (freelet self)
                  (freelet other)
                  (let $0)
                  (assign
                    (ref $0)
                    (select (ref self) [ (typename < []) ] (ref other)))
                  (let $1)
                  (assign (ref $1) (select () [ (typename not []) ] (ref $0)))
                  (ref $1)
                ]))
            (function
              >
              []
              [
                (param self (Self ) ())
                (param other (typeref [ (typename T []) ]) ())
              ]
              (typeref [ (typename Bool []) ])
              (lambda
                []
                []
                [
                  (freelet self)
                  (freelet other)
                  (let $0)
                  (assign
                    (ref $0)
                    (select (ref self) [ (typename <= []) ] (ref other)))
                  (let $1)
                  (assign (ref $1) (select () [ (typename not []) ] (ref $0)))
                  (ref $1)
                ]))
            (function
              <=>
              []
              [
                (param self (Self ) ())
                (param other (typeref [ (typename T []) ]) ())
              ]
              (typeref [ (typename Compare []) ])
              (lambda
                []
                []
                [
                  (freelet self)
                  (freelet other)
                  (let $0)
                  (assign
                    (ref $0)
                    (select (ref self) [ (typename < []) ] (ref other)))
                  (let $1)
                  (assign (ref $1) (select () [ (typename if []) ] (ref $0)))
                  (let $2)
                  (assign
                    (ref $2)
                    (lambda
                      []
                      []
                      [
                        (let $0)
                        (assign
                          (ref $0)
                          (select
                            ()
                            [ (typename Less []) (typename create []) ]
                            ()))
                        (ref $0)
                      ]))
                  (let $3)
                  (assign
                    (ref $3)
                    (select (ref $1) [ (typename apply []) ] (ref $2)))
                  (let $4)
                  (assign
                    (ref $4)
                    (select (ref self) [ (typename == []) ] (ref other)))
                  (let $5)
                  (assign
                    (ref $5)
                    (select (ref $3) [ (typename elseif []) ] (ref $4)))
                  (let $6)
                  (assign
                    (ref $6)
                    (lambda
                      []
                      []
                      [
                        (let $0)
                        (assign
                          (ref $0)
                          (select
                            ()
                            [ (typename Equal []) (typename create []) ]
                            ()))
                        (ref $0)
                      ]))
                  (let $7)
                  (assign
                    (ref $7)
                    (select (ref $5) [ (typename apply []) ] (ref $6)))
                  (let $8)
                  (assign
                    (ref $8)
                    (lambda
                      []
                      []
                      [
                        (let $0)
                        (assign
                          (ref $0)
                          (select
                            ()
                            [ (typename Greater []) (typename create []) ]
                            ()))
                        (ref $0)
                      ]))
                  (let $9)
                  (assign
                    (ref $9)
                    (select (ref $7) [ (typename else []) ] (ref $8)))
                  (ref $9)
                ]))
          ])
      ])
    (class
      $module-4
      []
      ()
      [
        (function
          ~
          [
            (typeparam T () ())
            (typeparamlist U () ())
            (typeparam V () ())
            (typeparam
              R
              (functiontype (typelist U) (typeref [ (typename V []) ]))
              ())
          ]
          [
            (param
              f
              (viewtype
                (typeref [ (typename R []) ])
                (functiontype
                  (tupletype [ (typeref [ (typename T []) ]) (typelist U) ])
                  (typeref [ (typename V []) ])))
              ())
            (param
              x
              (viewtype
                (typeref [ (typename R []) ])
                (typeref [ (typename T []) ]))
              ())
          ]
          (typeref [ (typename R []) ])
          (lambda
            []
            []
            [
              (let $0)
              (assign
                (ref $0)
                (lambda
                  []
                  [ (param y (typelist U) ()) ]
                  [
                    (freelet f)
                    (freelet x)
                    (let $0)
                    (assign (ref $0) (tuple [ (ref x) (ref y) ]))
                    (let $1)
                    (assign
                      (ref $1)
                      (select (ref f) [ (typename apply []) ] (ref $0)))
                    (ref $1)
                  ]))
              (ref $0)
            ]))
        (function
          |>
          [ (typeparamlist T () ()) (typeparam U () ()) ]
          [
            (param x (typelist T) ())
            (param
              y
              (functiontype (typelist T) (typeref [ (typename U []) ]))
              ())
          ]
          (typeref [ (typename U []) ])
          (lambda
            []
            []
            [
              (freelet y)
              (freelet x)
              (let $0)
              (assign (ref $0) (select (ref y) [ (typename apply []) ] (ref x)))
              (ref $0)
            ]))
        (class FalseBranch [] () [])
        (function
          if
          [ (typeparam T () ()) ]
          [
            (param
              cond
              (functiontype (tupletype []) (typeref [ (typename Bool []) ]))
              ())
          ]
          (functiontype
            (functiontype (tupletype []) (typeref [ (typename T []) ]))
            (uniontype
              [
                (typeref [ (typename Done [ (typeref [ (typename T []) ]) ]) ])
                (typeref [ (typename FalseBranch []) ])
              ]))
          (lambda
            []
            []
            [
              (let $0)
              (assign
                (ref $0)
                (lambda
                  []
                  [ (param ontrue () ()) ]
                  [
                    (freelet cond)
                    (let $0)
                    (assign
                      (ref $0)
                      (select (ref cond) [ (typename apply []) ] ()))
                    (let $1)
                    (assign
                      (ref $1)
                      (lambda
                        []
                        [ (param $0 () ()) ]
                        [
                          (let $1)
                          (assign
                            (ref $1)
                            (select
                              (param $0 () ())
                              [ (typename == []) ]
                              (ref $0)))
                          (let $2)
                          (assign
                            (ref $2)
                            (select () [ (typename requires []) ] (ref $1)))
                          (freelet ontrue)
                          (let $3)
                          (assign
                            (ref $3)
                            (select (ref ontrue) [ (typename apply []) ] ()))
                          (let $4)
                          (assign
                            (ref $4)
                            (select
                              ()
                              [ (typename Done []) (typename create []) ]
                              (ref $3)))
                          (ref $4)
                        ]))
                    (let $2)
                    (assign
                      (ref $2)
                      (lambda
                        []
                        [ (param $0 () ()) ]
                        [
                          (let $1)
                          (assign
                            (ref $1)
                            (select
                              (param $0 () ())
                              [ (typename == []) ]
                              (ref $0)))
                          (let $2)
                          (assign
                            (ref $2)
                            (select () [ (typename requires []) ] (ref $1)))
                          (let $3)
                          (assign
                            (ref $3)
                            (select
                              ()
                              [ (typename FalseBranch []) (typename create []) ]
                              ()))
                          (ref $3)
                        ]))
                    (let $3)
                    (assign (ref $3) (match (ref $0) [ (ref $1) (ref $2) ]))
                    (ref $3)
                  ]))
              (ref $0)
            ]))
        (function
          elseif
          [ (typeparam T () ()) (typeparam U () ()) ]
          [
            (param
              prev
              (uniontype
                [
                  (typeref
                    [ (typename Done [ (typeref [ (typename T []) ]) ]) ])
                  (typeref [ (typename FalseBranch []) ])
                ])
              ())
            (param
              cond
              (functiontype (tupletype []) (typeref [ (typename Bool []) ]))
              ())
          ]
          (functiontype
            (functiontype (tupletype []) (typeref [ (typename U []) ]))
            (uniontype
              [
                (typeref [ (typename Done [ (typeref [ (typename T []) ]) ]) ])
                (typeref [ (typename Done [ (typeref [ (typename U []) ]) ]) ])
              ]))
          (lambda
            []
            []
            [
              (let $0)
              (assign
                (ref $0)
                (lambda
                  []
                  [ (param ontrue () ()) ]
                  [
                    (freelet prev)
                    (let $0)
                    (assign
                      (ref $0)
                      (lambda
                        []
                        []
                        [
                          (freelet cond)
                          (let $0)
                          (assign
                            (ref $0)
                            (select () [ (typename if []) ] (ref cond)))
                          (freelet ontrue)
                          (let $1)
                          (assign
                            (ref $1)
                            (select
                              (ref $0)
                              [ (typename apply []) ]
                              (ref ontrue)))
                          (ref $1)
                        ]))
                    (let $1)
                    (assign
                      (ref $1)
                      (select (ref prev) [ (typename else []) ] (ref $0)))
                    (ref $1)
                  ]))
              (ref $0)
            ]))
        (function
          else
          [ (typeparam T () ()) (typeparam U () ()) ]
          [
            (param
              prev
              (uniontype
                [
                  (typeref
                    [ (typename Done [ (typeref [ (typename T []) ]) ]) ])
                  (typeref [ (typename FalseBranch []) ])
                ])
              ())
            (param
              onfalse
              (functiontype (tupletype []) (typeref [ (typename U []) ]))
              ())
          ]
          (uniontype
            [
              (typeref [ (typename Done [ (typeref [ (typename T []) ]) ]) ])
              (typeref [ (typename Done [ (typeref [ (typename U []) ]) ]) ])
            ])
          (lambda
            []
            []
            [
              (freelet prev)
              (let $0)
              (assign
                (ref $0)
                (lambda
                  []
                  [ (param $0 () ()) ]
                  [
                    (let $1)
                    (assign
                      (ref $1)
                      (select (param $0 () ()) [ (typename == []) ] (ref $0)))
                    (let $2)
                    (assign
                      (ref $2)
                      (select () [ (typename requires []) ] (ref $1)))
                    (freelet onfalse)
                    (let $3)
                    (assign
                      (ref $3)
                      (select (ref onfalse) [ (typename apply []) ] ()))
                    (let $4)
                    (assign
                      (ref $4)
                      (select
                        ()
                        [ (typename Done []) (typename create []) ]
                        (ref $3)))
                    (ref $4)
                  ]))
              (let $1)
              (assign
                (ref $1)
                (lambda
                  []
                  [
                    (param
                      v
                      (typeref
                        [ (typename Done [ (typeref [ (typename T []) ]) ]) ])
                      ())
                  ]
                  [ (ref v) ]))
              (let $2)
              (assign (ref $2) (match (ref prev) [ (ref $0) (ref $1) ]))
              (ref $2)
            ]))
        (using (typeref [ (modulename $module-3 []) ]))
        (interface Any [] () [])
        (class None [] () [])
        (class NoCatch [] () [])
        (class
          Done
          [ (typeparam T () (typeref [ (typename None []) ])) ]
          ()
          [
            (field result (typeref [ (typename T []) ]) ())
            (function
              create
              [
                (typeparam
                  R
                  (typeref
                    [ (typename Done [ (typeref [ (typename T []) ]) ]) ])
                  ())
              ]
              [
                (param
                  from
                  (viewtype
                    (typeref [ (typename R []) ])
                    (typeref [ (typename T []) ]))
                  (lambda
                    []
                    []
                    [
                      (let $0)
                      (assign
                        (ref $0)
                        (select
                          ()
                          [ (typename None []) (typename create []) ]
                          ()))
                      (ref $0)
                    ]))
              ]
              (typeref [ (typename R []) ])
              (lambda
                []
                []
                [
                  (freelet from)
                  (let $0)
                  (assign (ref $0) (new () (ref from)))
                  (ref $0)
                ]))
            (function
              apply
              [ (typeparam U () ()) ]
              [ (param x (typeref [ (typename U []) ]) ()) ]
              (typeref [ (typename U []) ])
              (lambda [] [] [ (freelet x) (ref x) ]))
          ])
        (class NoLabel [] () [])
        (class Break [ (typeparam L () ()) ] () [])
        (class Continue [ (typeparam L () ()) ] () [])
        (class
          break
          [ (typeparam L () (typeref [ (typename NoLabel []) ])) ]
          ()
          [
            (function
              create
              []
              []
              (throwtype
                (typeref [ (typename Break [ (typeref [ (typename L []) ]) ]) ]))
              (lambda
                []
                []
                [
                  (let $0)
                  (assign
                    (ref $0)
                    (select
                      ()
                      [
                        (typename Break [ (typeref [ (typename L []) ]) ])
                        (typename create [])
                      ]
                      ()))
                  (let $1)
                  (assign (ref $1) (throw (ref $0)))
                  (ref $1)
                ]))
          ])
        (class
          continue
          [ (typeparam L () (typeref [ (typename NoLabel []) ])) ]
          ()
          [
            (function
              create
              []
              []
              (throwtype
                (typeref
                  [ (typename Continue [ (typeref [ (typename L []) ]) ]) ]))
              (lambda
                []
                []
                [
                  (let $0)
                  (assign
                    (ref $0)
                    (select
                      ()
                      [
                        (typename Continue [ (typeref [ (typename L []) ]) ])
                        (typename create [])
                      ]
                      ()))
                  (let $1)
                  (assign (ref $1) (throw (ref $0)))
                  (ref $1)
                ]))
          ])
        (function
          while
          [
            (typeparam L () (typeref [ (typename NoLabel []) ]))
            (typeparam T () ())
            (typeparam U () ())
          ]
          [
            (param
              cond
              (functiontype (tupletype []) (typeref [ (typename Bool []) ]))
              ())
          ]
          (functiontype
            (functiontype
              (tupletype [])
              (uniontype
                [
                  (typeref [ (typename T []) ])
                  (throwtype (typeref [ (typename U []) ]))
                ]))
            (uniontype
              [
                (typeref [ (typename Done []) ])
                (throwtype (typeref [ (typename U []) ]))
              ]))
          (lambda
            []
            []
            [
              (let $0)
              (assign
                (ref $0)
                (lambda
                  []
                  [ (param body () ()) ]
                  [
                    (freelet cond)
                    (let $0)
                    (assign
                      (ref $0)
                      (select (ref cond) [ (typename apply []) ] ()))
                    (let $1)
                    (assign
                      (ref $1)
                      (lambda
                        []
                        [ (param $0 () ()) ]
                        [
                          (let $1)
                          (assign
                            (ref $1)
                            (select
                              (param $0 () ())
                              [ (typename == []) ]
                              (ref $0)))
                          (let $2)
                          (assign
                            (ref $2)
                            (select () [ (typename requires []) ] (ref $1)))
                          (let $3)
                          (assign
                            (ref $3)
                            (lambda
                              []
                              []
                              [
                                (freelet body)
                                (let $0)
                                (assign
                                  (ref $0)
                                  (select (ref body) [ (typename apply []) ] ()))
                                (let $1)
                                (assign
                                  (ref $1)
                                  (select
                                    ()
                                    [
                                      (typename continue [])
                                      (typename create [])
                                    ]
                                    ()))
                                (ref $1)
                              ]))
                          (let $4)
                          (assign
                            (ref $4)
                            (lambda
                              []
                              [ (param $0 () ()) ]
                              [
                                (let $1)
                                (assign
                                  (ref $1)
                                  (select
                                    (param $0 () ())
                                    [ (typename == []) ]
                                    (ref $0)))
                                (let $2)
                                (assign
                                  (ref $2)
                                  (select
                                    ()
                                    [ (typename requires []) ]
                                    (ref $1)))
                                (let $3)
                                (assign
                                  (ref $3)
                                  (select
                                    ()
                                    [ (typename Done []) (typename create []) ]
                                    ()))
                                (ref $3)
                              ]))
                          (let $5)
                          (assign
                            (ref $5)
                            (lambda
                              []
                              [ (param $0 () ()) ]
                              [
                                (let $1)
                                (assign
                                  (ref $1)
                                  (select
                                    (param $0 () ())
                                    [ (typename == []) ]
                                    (ref $0)))
                                (let $2)
                                (assign
                                  (ref $2)
                                  (select
                                    ()
                                    [ (typename requires []) ]
                                    (ref $1)))
                                (let $3)
                                (assign
                                  (ref $3)
                                  (select
                                    ()
                                    [
                                      (typename
                                        while
                                        [ (typeref [ (typename L []) ]) ])
                                    ]
                                    (ref cond)))
                                (freelet body)
                                (let $4)
                                (assign
                                  (ref $4)
                                  (select
                                    (ref $3)
                                    [ (typename apply []) ]
                                    (ref body)))
                                (ref $4)
                              ]))
                          (let $6)
                          (assign (ref $6) (try (ref $3) [ (ref $4) (ref $5) ]))
                          (ref $6)
                        ]))
                    (let $2)
                    (assign (ref $2) (lambda [] [] []))
                    (let $3)
                    (assign (ref $3) (match (ref $0) [ (ref $1) (ref $2) ]))
                    (ref $3)
                  ]))
              (ref $0)
            ]))
        (class NoMatch [] () [])
        (function
          as
          [ (typeparam T () ()) (typeparam U () ()) ]
          [ (param value (typeref [ (typename U []) ]) ()) ]
          (uniontype
            [
              (typeref [ (typename T []) ])
              (throwtype (typeref [ (typename NoMatch []) ]))
            ])
          (lambda
            []
            []
            [
              (freelet value)
              (let $0)
              (assign
                (ref $0)
                (lambda
                  []
                  [ (param x (typeref [ (typename T []) ]) ()) ]
                  [ (ref x) ]))
              (let $1)
              (assign
                (ref $1)
                (lambda
                  []
                  []
                  [
                    (let $0)
                    (assign
                      (ref $0)
                      (select
                        ()
                        [ (typename NoMatch []) (typename create []) ]
                        ()))
                    (let $1)
                    (assign (ref $1) (throw (ref $0)))
                    (ref $1)
                  ]))
              (let $2)
              (assign (ref $2) (match (ref value) [ (ref $0) (ref $1) ]))
              (ref $2)
            ]))
        (function
          requires
          []
          [ (param pred (typeref [ (typename Bool []) ]) ()) ]
          (uniontype
            [
              (typeref [ (typename None []) ])
              (throwtype (typeref [ (typename NoMatch []) ]))
            ])
          (lambda
            []
            []
            [
              (freelet pred)
              (let $0)
              (assign (ref $0) (select () [ (typename not []) ] (ref pred)))
              (let $1)
              (assign (ref $1) (select () [ (typename if []) ] (ref $0)))
              (let $2)
              (assign
                (ref $2)
                (lambda
                  []
                  []
                  [
                    (let $0)
                    (assign
                      (ref $0)
                      (select
                        ()
                        [ (typename NoMatch []) (typename create []) ]
                        ()))
                    (let $1)
                    (assign (ref $1) (throw (ref $0)))
                    (ref $1)
                  ]))
              (let $3)
              (assign
                (ref $3)
                (select (ref $1) [ (typename apply []) ] (ref $2)))
              (ref $3)
            ]))
        (class
          OrEquals
          [ (typeparam T1 () ()) (typeparam T2 () ()) ]
          ()
          [
            (field
              a
              (typeref
                [ (typename Equatable [ (typeref [ (typename T1 []) ]) ]) ])
              ())
            (field
              b
              (typeref
                [ (typename Equatable [ (typeref [ (typename T2 []) ]) ]) ])
              ())
            (function
              ==
              []
              [
                (param
                  self
                  (typeref
                    [
                      (typename
                        OrEquals
                        [
                          (typeref [ (typename T1 []) ])
                          (typeref [ (typename T2 []) ])
                        ])
                    ])
                  ())
                (param
                  x
                  (uniontype
                    [
                      (typeref [ (typename T1 []) ])
                      (typeref [ (typename T2 []) ])
                    ])
                  ())
              ]
              (typeref [ (typename Bool []) ])
              (lambda
                []
                []
                [
                  (freelet x)
                  (let $0)
                  (assign
                    (ref $0)
                    (lambda
                      []
                      [ (param y (typeref [ (typename T1 []) ]) ()) ]
                      [
                        (freelet self)
                        (let $0)
                        (assign
                          (ref $0)
                          (select (ref self) [ (typename a []) ] ()))
                        (let $1)
                        (assign
                          (ref $1)
                          (select (ref $0) [ (typename == []) ] (ref y)))
                        (ref $1)
                      ]))
                  (let $1)
                  (assign
                    (ref $1)
                    (lambda
                      []
                      [ (param y (typeref [ (typename T2 []) ]) ()) ]
                      [
                        (freelet self)
                        (let $0)
                        (assign
                          (ref $0)
                          (select (ref self) [ (typename b []) ] ()))
                        (let $1)
                        (assign
                          (ref $1)
                          (select (ref $0) [ (typename == []) ] (ref y)))
                        (ref $1)
                      ]))
                  (let $2)
                  (assign
                    (ref $2)
                    (lambda
                      []
                      []
                      [ (let $0) (assign (ref $0) (bool false)) (ref $0) ]))
                  (let $3)
                  (assign
                    (ref $3)
                    (match (ref x) [ (ref $0) (ref $1) (ref $2) ]))
                  (ref $3)
                ]))
          ])
        (function
          |
          [ (typeparam T1 () ()) (typeparam T2 () ()) ]
          [
            (param
              e1
              (typeref
                [ (typename Equatable [ (typeref [ (typename T1 []) ]) ]) ])
              ())
            (param
              e2
              (typeref
                [ (typename Equatable [ (typeref [ (typename T2 []) ]) ]) ])
              ())
          ]
          (typeref
            [
              (typename
                OrEquals
                [
                  (typeref [ (typename T1 []) ])
                  (typeref [ (typename T2 []) ])
                ])
            ])
          (lambda
            []
            []
            [
              (freelet e1)
              (freelet e2)
              (let $0)
              (assign (ref $0) (tuple [ (ref e1) (ref e2) ]))
              (let $1)
              (assign
                (ref $1)
                (select
                  ()
                  [ (typename OrEquals []) (typename create []) ]
                  (ref $0)))
              (ref $1)
            ]))
        (class
          Return
          [ (typeparam T () ()) ]
          ()
          [ (field value (typeref [ (typename T []) ]) ()) ])
        (class
          return
          [ (typeparam T () (typeref [ (typename None []) ])) ]
          ()
          [
            (function
              create
              []
              [
                (param
                  x
                  (typeref [ (typename T []) ])
                  (lambda
                    []
                    []
                    [
                      (let $0)
                      (assign
                        (ref $0)
                        (select
                          ()
                          [ (typename None []) (typename create []) ]
                          ()))
                      (ref $0)
                    ]))
              ]
              (throwtype
                (typeref
                  [ (typename Return [ (typeref [ (typename T []) ]) ]) ]))
              (lambda
                []
                []
                [
                  (freelet x)
                  (let $0)
                  (assign
                    (ref $0)
                    (select
                      ()
                      [
                        (typename Return [ (typeref [ (typename T []) ]) ])
                        (typename create [])
                      ]
                      (ref x)))
                  (let $1)
                  (assign (ref $1) (throw (ref $0)))
                  (ref $1)
                ]))
          ])
      ])
  ])
