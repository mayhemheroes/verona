(class
  ()
  []
  ()
  [
    (class
      $module-0
      []
      ()
      [
        (using (typeref [ (modulename $module-1 []) ]))
        (using (typeref [ (modulename $module-2 []) ]))
        (class List [ (typeparam T () ()) ] () [])
        (function
          for_sum
          (lambda
            []
            [
              (param
                x
                (typeref
                  [ (typename List [ (typeref [ (typename U32 []) ]) ]) ])
                ())
            ]
            (typeref [ (typename U32 []) ])
            [
              (var sum)
              (oftype (ref sum) (typeref [ (typename U32 []) ]))
              (let $0)
              (assign (ref $0) (int 0))
              (assign (ref sum) (ref $0))
              (let $1)
              (assign (ref $1) (select () [ (typename values []) ] (ref x)))
              (let $2)
              (assign (ref $2) (select () [ (typename for []) ] (ref $1)))
              (let $5)
              (assign
                (ref $5)
                (lambda
                  []
                  [ (param a () ()) ]
                  ()
                  [
                    (free sum)
                    (let $3)
                    (assign
                      (ref $3)
                      (select (ref sum) [ (typename + []) ] (ref a)))
                    (let $4)
                    (assign (ref $4) (ref sum))
                    (assign (ref sum) (ref $3))
                    (ref $4)
                  ]))
              (let $6)
              (assign
                (ref $6)
                (select (ref $2) [ (typename apply []) ] (ref $5)))
              (let $7)
              (assign
                (ref $7)
                (select (ref $6) [ (typename apply []) ] (ref sum)))
              (ref $7)
            ]))
        (function
          while_sum
          (lambda
            []
            [
              (param
                x
                (typeref
                  [ (typename List [ (typeref [ (typename U32 []) ]) ]) ])
                ())
            ]
            (typeref [ (typename U32 []) ])
            [
              (var sum)
              (oftype (ref sum) (typeref [ (typename U32 []) ]))
              (let $0)
              (assign (ref $0) (int 0))
              (assign (ref sum) (ref $0))
              (let iter)
              (let $1)
              (assign (ref $1) (select (ref x) [ (typename values []) ] ()))
              (assign (ref iter) (ref $1))
              (let $3)
              (assign
                (ref $3)
                (lambda
                  []
                  []
                  ()
                  [
                    (free iter)
                    (let $2)
                    (assign
                      (ref $2)
                      (select (ref iter) [ (typename has_value []) ] ()))
                    (ref $2)
                  ]))
              (let $4)
              (assign (ref $4) (select () [ (typename while []) ] (ref $3)))
              (let $9)
              (assign
                (ref $9)
                (lambda
                  []
                  []
                  ()
                  [
                    (let a)
                    (free iter)
                    (let $5)
                    (assign
                      (ref $5)
                      (select (ref iter) [ (typename apply []) ] ()))
                    (assign (ref a) (ref $5))
                    (let $6)
                    (assign
                      (ref $6)
                      (select () [ (typename next []) ] (ref iter)))
                    (free sum)
                    (let $7)
                    (assign
                      (ref $7)
                      (select (ref sum) [ (typename + []) ] (ref a)))
                    (let $8)
                    (assign (ref $8) (ref sum))
                    (assign (ref sum) (ref $7))
                    (ref $8)
                  ]))
              (let $10)
              (assign
                (ref $10)
                (select (ref $4) [ (typename apply []) ] (ref $9)))
              (let $11)
              (assign
                (ref $11)
                (select (ref $10) [ (typename apply []) ] (ref sum)))
              (ref $11)
            ]))
      ])
    (class
      $module-1
      []
      ()
      [
        (function
          for
          (lambda
            [
              (typeparam L () (typeref [ (typename NoLabel []) ]))
              (typeparam T () ())
              (typeparam U () ())
              (typeparam V () ())
            ]
            [
              (param
                iter
                (typeref
                  [ (typename Iterator [ (typeref [ (typename T []) ]) ]) ])
                ())
            ]
            (functiontype
              (functiontype
                (typeref [ (typename T []) ])
                (uniontype
                  [
                    (typeref [ (typename U []) ])
                    (throwtype (typeref [ (typename V []) ]))
                  ]))
              (uniontype
                [
                  (typeref [ (typename Done []) ])
                  (throwtype (typeref [ (typename V []) ]))
                ]))
            [
              (let $20)
              (assign
                (ref $20)
                (lambda
                  []
                  [ (param body () ()) ]
                  ()
                  [
                    (let $1)
                    (assign
                      (ref $1)
                      (lambda
                        []
                        []
                        ()
                        [ (let $0) (assign (ref $0) (bool true)) (ref $0) ]))
                    (let $2)
                    (assign
                      (ref $2)
                      (select () [ (typename while []) ] (ref $1)))
                    (let $18)
                    (assign
                      (ref $18)
                      (lambda
                        []
                        []
                        ()
                        [
                          (let $6)
                          (assign
                            (ref $6)
                            (lambda
                              []
                              []
                              ()
                              [
                                (free body)
                                (free iter)
                                (let $3)
                                (assign
                                  (ref $3)
                                  (select (ref iter) [ (typename apply []) ] ()))
                                (let $4)
                                (assign
                                  (ref $4)
                                  (select
                                    (ref body)
                                    [ (typename apply []) ]
                                    (ref $3)))
                                (let $5)
                                (assign
                                  (ref $5)
                                  (select
                                    ()
                                    [
                                      (typename continue [])
                                      (typename create [])
                                    ]
                                    ()))
                                (ref $5)
                              ]))
                          (let $11)
                          (assign
                            (ref $11)
                            (lambda
                              []
                              [ (param $7 () ()) ]
                              ()
                              [
                                (let $8)
                                (assign
                                  (ref $8)
                                  (select
                                    (param $7 () ())
                                    [ (typename == []) ]
                                    (ref $7)))
                                (let $9)
                                (assign
                                  (ref $9)
                                  (select
                                    ()
                                    [ (typename requires []) ]
                                    (ref $8)))
                                (let $10)
                                (assign
                                  (ref $10)
                                  (select
                                    ()
                                    [ (typename break []) (typename create []) ]
                                    ()))
                                (ref $10)
                              ]))
                          (let $16)
                          (assign
                            (ref $16)
                            (lambda
                              []
                              [ (param $12 () ()) ]
                              ()
                              [
                                (let $13)
                                (assign
                                  (ref $13)
                                  (select
                                    (param $12 () ())
                                    [ (typename == []) ]
                                    (ref $12)))
                                (let $14)
                                (assign
                                  (ref $14)
                                  (select
                                    ()
                                    [ (typename requires []) ]
                                    (ref $13)))
                                (free iter)
                                (let $15)
                                (assign
                                  (ref $15)
                                  (select () [ (typename next []) ] (ref iter)))
                                (ref $15)
                              ]))
                          (let $17)
                          (assign
                            (ref $17)
                            (try (ref $6) [ (ref $11) (ref $16) ]))
                          (ref $17)
                        ]))
                    (let $19)
                    (assign
                      (ref $19)
                      (select (ref $2) [ (typename apply []) ] (ref $18)))
                    (ref $19)
                  ]))
              (ref $20)
            ]))
        (using (typeref [ (modulename $module-3 []) ]))
        (using (typeref [ (modulename $module-4 []) ]))
        (class Empty [] () [])
        (interface
          Iterator
          [ (typeparam T () ()) ]
          ()
          [
            (function
              apply
              (lambda
                [ (typeparam S (isecttype [ (Self ) (mut ) ]) ()) ]
                [ (param self (typeref [ (typename S []) ]) ()) ]
                (uniontype
                  [
                    (viewtype
                      (typeref [ (typename S []) ])
                      (typeref [ (typename T []) ]))
                    (throwtype (typeref [ (typename Empty []) ]))
                  ])
                []))
            (function
              next
              (lambda
                []
                [ (param self (isecttype [ (Self ) (mut ) ]) ()) ]
                ()
                []))
            (function
              filter
              (lambda
                [
                  (typeparam
                    S
                    (isecttype
                      [
                        (typeref
                          [
                            (typename
                              Iterator
                              [ (typeref [ (typename T []) ]) ])
                          ])
                        (mut )
                      ])
                    ())
                  (typeparam
                    R
                    (isecttype
                      [
                        (typeref
                          [
                            (typename Filter [ (typeref [ (typename T []) ]) ])
                          ])
                        (mut )
                      ])
                    ())
                ]
                [
                  (param
                    self
                    (viewtype
                      (typeref [ (typename R []) ])
                      (typeref [ (typename S []) ]))
                    ())
                  (param
                    f
                    (functiontype
                      (viewtype
                        (viewtype
                          (typeref [ (typename R []) ])
                          (typeref [ (typename S []) ]))
                        (typeref [ (typename T []) ]))
                      (typeref [ (typename Bool []) ]))
                    ())
                ]
                (typeref [ (typename R []) ])
                [
                  (let $0)
                  (assign (ref $0) (tuple [ (ref self) (ref f) ]))
                  (let $1)
                  (assign
                    (ref $1)
                    (select
                      ()
                      [ (typename Filter []) (typename create []) ]
                      (ref $0)))
                  (ref $1)
                ]))
          ])
        (class
          Repeat
          [ (typeparam T () ()) ]
          (typeref [ (typename Iterator [ (typeref [ (typename T []) ]) ]) ])
          [
            (field value (typeref [ (typename T []) ]) ())
            (function
              create
              (lambda
                [
                  (typeparam
                    R
                    (typeref
                      [ (typename Repeat [ (typeref [ (typename T []) ]) ]) ])
                    ())
                ]
                [
                  (param
                    value
                    (viewtype
                      (typeref [ (typename R []) ])
                      (typeref [ (typename T []) ]))
                    ())
                ]
                (typeref [ (typename R []) ])
                [ (let $0) (assign (ref $0) (new () (ref value))) (ref $0) ]))
            (function
              apply
              (lambda
                [
                  (typeparam
                    S
                    (isecttype
                      [
                        (typeref
                          [
                            (typename Repeat [ (typeref [ (typename T []) ]) ])
                          ])
                        (mut )
                      ])
                    ())
                ]
                [ (param self (typeref [ (typename S []) ]) ()) ]
                (viewtype
                  (typeref [ (typename S []) ])
                  (typeref [ (typename T []) ]))
                [
                  (let $0)
                  (assign
                    (ref $0)
                    (select (ref self) [ (typename value []) ] ()))
                  (ref $0)
                ]))
            (function
              next
              (lambda
                []
                [
                  (param
                    self
                    (isecttype
                      [
                        (typeref
                          [
                            (typename Repeat [ (typeref [ (typename T []) ]) ])
                          ])
                        (mut )
                      ])
                    ())
                ]
                ()
                []))
          ])
        (class
          Chain
          [ (typeparam T () ()) ]
          (typeref [ (typename Iterator [ (typeref [ (typename T []) ]) ]) ])
          [
            (field
              value
              (isecttype
                [
                  (typeref
                    [
                      (typename
                        Iterator
                        [
                          (isecttype
                            [
                              (typeref
                                [
                                  (typename
                                    Iterator
                                    [ (typeref [ (typename T []) ]) ])
                                ])
                              (mut )
                            ])
                        ])
                    ])
                  (mut )
                ])
              ())
            (function
              create
              (lambda
                [
                  (typeparam
                    R
                    (typeref
                      [ (typename Chain [ (typeref [ (typename T []) ]) ]) ])
                    ())
                ]
                [
                  (param
                    value
                    (viewtype
                      (typeref [ (typename R []) ])
                      (isecttype
                        [
                          (typeref
                            [
                              (typename
                                Iterator
                                [
                                  (isecttype
                                    [
                                      (typeref
                                        [
                                          (typename
                                            Iterator
                                            [ (typeref [ (typename T []) ]) ])
                                        ])
                                      (mut )
                                    ])
                                ])
                            ])
                          (mut )
                        ]))
                    ())
                ]
                (typeref [ (typename R []) ])
                [ (let $0) (assign (ref $0) (new () (ref value))) (ref $0) ]))
            (function
              apply
              (lambda
                [
                  (typeparam
                    S
                    (isecttype
                      [
                        (typeref
                          [ (typename Chain [ (typeref [ (typename T []) ]) ]) ])
                        (mut )
                      ])
                    ())
                ]
                [ (param self (typeref [ (typename S []) ]) ()) ]
                (uniontype
                  [
                    (viewtype
                      (typeref [ (typename S []) ])
                      (typeref [ (typename T []) ]))
                    (throwtype (typeref [ (typename Empty []) ]))
                  ])
                [
                  (let $0)
                  (assign
                    (ref $0)
                    (select (ref self) [ (typename value []) ] ()))
                  (let $1)
                  (assign (ref $1) (select (ref $0) [ (typename apply []) ] ()))
                  (ref $1)
                ]))
            (function
              next
              (lambda
                []
                [
                  (param
                    self
                    (isecttype
                      [
                        (typeref
                          [ (typename Chain [ (typeref [ (typename T []) ]) ]) ])
                        (mut )
                      ])
                    ())
                ]
                ()
                [
                  (let $0)
                  (assign
                    (ref $0)
                    (select (ref self) [ (typename value []) ] ()))
                  (let $1)
                  (assign (ref $1) (select (ref $0) [ (typename next []) ] ()))
                  (ref $1)
                ]))
          ])
        (class
          Filter
          [ (typeparam T () ()) ]
          (typeref [ (typename Iterator [ (typeref [ (typename T []) ]) ]) ])
          [
            (field
              it
              (isecttype
                [
                  (typeref
                    [ (typename Iterator [ (typeref [ (typename T []) ]) ]) ])
                  (mut )
                ])
              ())
            (field
              f
              (functiontype
                (typeref [ (typename T []) ])
                (typeref [ (typename Bool []) ]))
              ())
            (field ok (typeref [ (typename Bool []) ]) ())
            (function
              create
              (lambda
                []
                [
                  (param
                    it
                    (isecttype
                      [
                        (typeref
                          [
                            (typename
                              Iterator
                              [ (typeref [ (typename T []) ]) ])
                          ])
                        (mut )
                      ])
                    ())
                  (param
                    f
                    (functiontype
                      (typeref [ (typename T []) ])
                      (typeref [ (typename Bool []) ]))
                    ())
                ]
                (isecttype
                  [
                    (typeref
                      [ (typename Filter [ (typeref [ (typename T []) ]) ]) ])
                    (mut )
                  ])
                [
                  (let $0)
                  (assign (ref $0) (bool false))
                  (let $1)
                  (assign (ref $1) (tuple [ (ref it) (ref f) (ref $0) ]))
                  (let $2)
                  (assign (ref $2) (new () (ref $1)))
                  (ref $2)
                ]))
            (function
              apply
              (lambda
                [
                  (typeparam
                    S
                    (isecttype
                      [
                        (typeref
                          [
                            (typename Filter [ (typeref [ (typename T []) ]) ])
                          ])
                        (mut )
                      ])
                    ())
                ]
                [ (param self (typeref [ (typename S []) ]) ()) ]
                (uniontype
                  [
                    (viewtype
                      (typeref [ (typename S []) ])
                      (typeref [ (typename T []) ]))
                    (throwtype (typeref [ (typename Empty []) ]))
                  ])
                [
                  (let $0)
                  (assign
                    (ref $0)
                    (select (ref self) [ (typename _advance []) ] ()))
                  (let $1)
                  (assign (ref $1) (select (ref self) [ (typename it []) ] ()))
                  (ref $1)
                ]))
            (function
              next
              (lambda
                []
                [
                  (param
                    self
                    (isecttype
                      [
                        (typeref
                          [
                            (typename Filter [ (typeref [ (typename T []) ]) ])
                          ])
                        (mut )
                      ])
                    ())
                ]
                ()
                [
                  (let $0)
                  (assign (ref $0) (select (ref self) [ (typename it []) ] ()))
                  (let $1)
                  (assign (ref $1) (select (ref $0) [ (typename next []) ] ()))
                  (let $2)
                  (assign
                    (ref $2)
                    (select (ref self) [ (typename _advance []) ] ()))
                  (ref $2)
                ]))
            (function
              _advance
              (lambda
                []
                [ (param self (isecttype [ (Self ) (mut ) ]) ()) ]
                ()
                [
                  (let $0)
                  (assign (ref $0) (select (ref self) [ (typename ok []) ] ()))
                  (let $1)
                  (assign (ref $1) (select () [ (typename not []) ] (ref $0)))
                  (let $2)
                  (assign (ref $2) (select () [ (typename if []) ] (ref $1)))
                  (let $17)
                  (assign
                    (ref $17)
                    (lambda
                      []
                      []
                      ()
                      [
                        (free self)
                        (var $3)
                        (assign
                          (ref $3)
                          (select (ref self) [ (typename ok []) ] ()))
                        (let $4)
                        (assign (ref $4) (bool true))
                        (assign (ref $3) (ref $4))
                        (let $14)
                        (assign
                          (ref $14)
                          (lambda
                            []
                            []
                            ()
                            [
                              (let $8)
                              (assign
                                (ref $8)
                                (lambda
                                  []
                                  []
                                  ()
                                  [
                                    (free self)
                                    (let $5)
                                    (assign
                                      (ref $5)
                                      (select
                                        (ref self)
                                        [ (typename it []) ]
                                        ()))
                                    (let $6)
                                    (assign
                                      (ref $6)
                                      (select
                                        (ref self)
                                        [ (typename f []) ]
                                        (ref $5)))
                                    (let $7)
                                    (assign
                                      (ref $7)
                                      (select () [ (typename not []) ] (ref $6)))
                                    (ref $7)
                                  ]))
                              (let $9)
                              (assign
                                (ref $9)
                                (select () [ (typename while []) ] (ref $8)))
                              (let $12)
                              (assign
                                (ref $12)
                                (lambda
                                  []
                                  []
                                  ()
                                  [
                                    (free self)
                                    (let $10)
                                    (assign
                                      (ref $10)
                                      (select
                                        (ref self)
                                        [ (typename it []) ]
                                        ()))
                                    (let $11)
                                    (assign
                                      (ref $11)
                                      (select
                                        (ref $10)
                                        [ (typename next []) ]
                                        ()))
                                    (ref $11)
                                  ]))
                              (let $13)
                              (assign
                                (ref $13)
                                (select
                                  (ref $9)
                                  [ (typename apply []) ]
                                  (ref $12)))
                              (ref $13)
                            ]))
                        (let $15)
                        (assign
                          (ref $15)
                          (lambda [] [ (param Empty () ()) ] () []))
                        (let $16)
                        (assign (ref $16) (try (ref $14) [ (ref $15) ]))
                        (ref $16)
                      ]))
                  (let $18)
                  (assign
                    (ref $18)
                    (select (ref $2) [ (typename apply []) ] (ref $17)))
                  (ref $18)
                ]))
          ])
        (class
          Option
          [ (typeparam T () ()) ]
          (typeref [ (typename Iterator [ (typeref [ (typename T []) ]) ]) ])
          [
            (field
              v
              (uniontype
                [
                  (typeref [ (typename T []) ])
                  (typeref [ (typename None []) ])
                ])
              ())
            (function
              create
              (lambda
                [
                  (typeparam
                    S
                    (typeref
                      [ (typename Option [ (typeref [ (typename T []) ]) ]) ])
                    ())
                ]
                [
                  (param
                    v
                    (extracttype
                      (typeref [ (typename S []) ])
                      (typeref [ (typename T []) ]))
                    ())
                ]
                (typeref [ (typename S []) ])
                [ (let $0) (assign (ref $0) (new () (ref v))) (ref $0) ]))
            (function
              empty
              (lambda
                [
                  (typeparam
                    S
                    (typeref
                      [ (typename Option [ (typeref [ (typename T []) ]) ]) ])
                    ())
                ]
                []
                (typeref [ (typename S []) ])
                [
                  (let $0)
                  (assign
                    (ref $0)
                    (select () [ (typename None []) (typename create []) ] ()))
                  (let $1)
                  (assign (ref $1) (new () (ref $0)))
                  (ref $1)
                ]))
            (function
              has_value
              (lambda
                []
                [
                  (param
                    self
                    (typeref
                      [ (typename Option [ (typeref [ (typename T []) ]) ]) ])
                    ())
                ]
                (typeref [ (typename Bool []) ])
                [
                  (let $0)
                  (assign (ref $0) (select (ref self) [ (typename v []) ] ()))
                  (let $5)
                  (assign
                    (ref $5)
                    (lambda
                      []
                      [ (param $1 () ()) ]
                      ()
                      [
                        (let $2)
                        (assign
                          (ref $2)
                          (select
                            (param $1 () ())
                            [ (typename == []) ]
                            (ref $1)))
                        (let $3)
                        (assign
                          (ref $3)
                          (select () [ (typename requires []) ] (ref $2)))
                        (let $4)
                        (assign (ref $4) (bool false))
                        (ref $4)
                      ]))
                  (let $7)
                  (assign
                    (ref $7)
                    (lambda
                      []
                      []
                      ()
                      [ (let $6) (assign (ref $6) (bool true)) (ref $6) ]))
                  (let $8)
                  (assign (ref $8) (match (ref $0) [ (ref $5) (ref $7) ]))
                  (ref $8)
                ]))
            (function
              apply
              (lambda
                [
                  (typeparam
                    S
                    (typeref
                      [ (typename Option [ (typeref [ (typename T []) ]) ]) ])
                    ())
                ]
                [ (param self (typeref [ (typename S []) ]) ()) ]
                (uniontype
                  [
                    (viewtype
                      (typeref [ (typename S []) ])
                      (typeref [ (typename T []) ]))
                    (throwtype (typeref [ (typename Empty []) ]))
                  ])
                [
                  (let $0)
                  (assign (ref $0) (select (ref self) [ (typename v []) ] ()))
                  (let $1)
                  (assign
                    (ref $1)
                    (lambda
                      []
                      [
                        (param
                          v
                          (viewtype
                            (typeref [ (typename S []) ])
                            (typeref [ (typename T []) ]))
                          ())
                      ]
                      ()
                      [ (ref v) ]))
                  (let $3)
                  (assign
                    (ref $3)
                    (lambda
                      []
                      []
                      ()
                      [
                        (let $2)
                        (assign
                          (ref $2)
                          (select
                            ()
                            [ (typename Empty []) (typename create []) ]
                            ()))
                        (throw (ref $2))
                      ]))
                  (let $4)
                  (assign (ref $4) (match (ref $0) [ (ref $1) (ref $3) ]))
                  (ref $4)
                ]))
            (function
              value_or
              (lambda
                [
                  (typeparam
                    S
                    (typeref
                      [ (typename Option [ (typeref [ (typename T []) ]) ]) ])
                    ())
                  (typeparam U () ())
                ]
                [
                  (param self (typeref [ (typename S []) ]) ())
                  (param default (typeref [ (typename U []) ]) ())
                ]
                (uniontype
                  [
                    (viewtype
                      (typeref [ (typename S []) ])
                      (typeref [ (typename T []) ]))
                    (typeref [ (typename U []) ])
                  ])
                [
                  (let $0)
                  (assign (ref $0) (select (ref self) [ (typename v []) ] ()))
                  (let $1)
                  (assign
                    (ref $1)
                    (lambda
                      []
                      [
                        (param
                          v
                          (viewtype
                            (typeref [ (typename S []) ])
                            (typeref [ (typename T []) ]))
                          ())
                      ]
                      ()
                      [ (ref v) ]))
                  (let $2)
                  (assign
                    (ref $2)
                    (lambda [] [] () [ (free default) (ref default) ]))
                  (let $3)
                  (assign (ref $3) (match (ref $0) [ (ref $1) (ref $2) ]))
                  (ref $3)
                ]))
            (function
              extract
              (lambda
                [
                  (typeparam
                    S
                    (isecttype
                      [
                        (typeref
                          [
                            (typename Option [ (typeref [ (typename T []) ]) ])
                          ])
                        (mut )
                      ])
                    ())
                ]
                [ (param self (typeref [ (typename S []) ]) ()) ]
                (uniontype
                  [
                    (extracttype
                      (typeref [ (typename S []) ])
                      (typeref [ (typename T []) ]))
                    (throwtype (typeref [ (typename Empty []) ]))
                  ])
                [
                  (let $0)
                  (assign (ref $0) (select (ref self) [ (typename v []) ] ()))
                  (let $4)
                  (assign
                    (ref $4)
                    (lambda
                      []
                      [
                        (param
                          v
                          (extracttype
                            (typeref [ (typename S []) ])
                            (typeref [ (typename T []) ]))
                          ())
                      ]
                      ()
                      [
                        (free self)
                        (var $1)
                        (assign
                          (ref $1)
                          (select (ref self) [ (typename v []) ] ()))
                        (let $2)
                        (assign
                          (ref $2)
                          (select
                            ()
                            [ (typename None []) (typename create []) ]
                            ()))
                        (let $3)
                        (assign (ref $3) (ref $1))
                        (assign (ref $1) (ref $2))
                        (ref $3)
                      ]))
                  (let $6)
                  (assign
                    (ref $6)
                    (lambda
                      []
                      []
                      ()
                      [
                        (let $5)
                        (assign
                          (ref $5)
                          (select
                            ()
                            [ (typename Empty []) (typename create []) ]
                            ()))
                        (throw (ref $5))
                      ]))
                  (let $7)
                  (assign (ref $7) (match (ref $0) [ (ref $4) (ref $6) ]))
                  (ref $7)
                ]))
            (function
              extract_or
              (lambda
                [
                  (typeparam
                    S
                    (isecttype
                      [
                        (typeref
                          [
                            (typename Option [ (typeref [ (typename T []) ]) ])
                          ])
                        (mut )
                      ])
                    ())
                  (typeparam U () ())
                ]
                [
                  (param self (typeref [ (typename S []) ]) ())
                  (param default (typeref [ (typename U []) ]) ())
                ]
                (uniontype
                  [
                    (extracttype
                      (typeref [ (typename S []) ])
                      (typeref [ (typename T []) ]))
                    (typeref [ (typename U []) ])
                  ])
                [
                  (let $0)
                  (assign (ref $0) (select (ref self) [ (typename v []) ] ()))
                  (let $4)
                  (assign
                    (ref $4)
                    (lambda
                      []
                      [
                        (param
                          v
                          (extracttype
                            (typeref [ (typename S []) ])
                            (typeref [ (typename T []) ]))
                          ())
                      ]
                      ()
                      [
                        (free self)
                        (var $1)
                        (assign
                          (ref $1)
                          (select (ref self) [ (typename v []) ] ()))
                        (let $2)
                        (assign
                          (ref $2)
                          (select
                            ()
                            [ (typename None []) (typename create []) ]
                            ()))
                        (let $3)
                        (assign (ref $3) (ref $1))
                        (assign (ref $1) (ref $2))
                        (ref $3)
                      ]))
                  (let $5)
                  (assign
                    (ref $5)
                    (lambda [] [] () [ (free default) (ref default) ]))
                  (let $6)
                  (assign (ref $6) (match (ref $0) [ (ref $4) (ref $5) ]))
                  (ref $6)
                ]))
          ])
      ])
    (class
      $module-2
      []
      ()
      [
        (class I8 [] () [])
        (class I16 [] () [])
        (class I32 [] () [])
        (class I64 [] () [])
        (class I128 [] () [])
        (class ISize [] () [])
        (class U8 [] () [])
        (class U16 [] () [])
        (class U32 [] () [])
        (class U64 [] () [])
        (class U128 [] () [])
        (class USize [] () [])
        (class F32 [] () [])
        (class F64 [] () [])
      ])
    (class
      $module-3
      []
      ()
      [
        (class
          Bool
          []
          ()
          [
            (function
              apply
              (lambda
                []
                [ (param self (typeref [ (typename Bool []) ]) ()) ]
                (typeref [ (typename Bool []) ])
                [ (ref self) ]))
            (function
              bool
              (lambda
                []
                [ (param self (typeref [ (typename Bool []) ]) ()) ]
                (typeref [ (typename Bool []) ])
                [ (ref self) ]))
          ])
        (interface
          ToBool
          []
          ()
          [
            (function
              bool
              (lambda
                []
                [ (param self (Self ) ()) ]
                (typeref [ (typename Bool []) ])
                []))
          ])
        (function
          and
          (lambda
            [
              (typeparam T (typeref [ (typename ToBool []) ]) ())
              (typeparam U () ())
            ]
            [
              (param a (typeref [ (typename T []) ]) ())
              (param
                b
                (functiontype (tupletype []) (typeref [ (typename U []) ]))
                ())
            ]
            (uniontype
              [ (typeref [ (typename T []) ]) (typeref [ (typename U []) ]) ])
            [
              (let $0)
              (assign (ref $0) (select () [ (typename bool []) ] (ref a)))
              (let $4)
              (assign
                (ref $4)
                (lambda
                  []
                  [ (param $1 () ()) ]
                  ()
                  [
                    (let $2)
                    (assign
                      (ref $2)
                      (select (param $1 () ()) [ (typename == []) ] (ref $1)))
                    (let $3)
                    (assign
                      (ref $3)
                      (select () [ (typename requires []) ] (ref $2)))
                    (free a)
                    (ref a)
                  ]))
              (let $9)
              (assign
                (ref $9)
                (lambda
                  []
                  [ (param $5 () ()) ]
                  ()
                  [
                    (let $6)
                    (assign
                      (ref $6)
                      (select (param $5 () ()) [ (typename == []) ] (ref $5)))
                    (let $7)
                    (assign
                      (ref $7)
                      (select () [ (typename requires []) ] (ref $6)))
                    (free b)
                    (let $8)
                    (assign
                      (ref $8)
                      (select (ref b) [ (typename apply []) ] ()))
                    (ref $8)
                  ]))
              (let $10)
              (assign (ref $10) (match (ref $0) [ (ref $4) (ref $9) ]))
              (ref $10)
            ]))
        (function
          or
          (lambda
            [
              (typeparam T (typeref [ (typename ToBool []) ]) ())
              (typeparam U () ())
            ]
            [
              (param a (typeref [ (typename T []) ]) ())
              (param
                b
                (functiontype (tupletype []) (typeref [ (typename U []) ]))
                ())
            ]
            (uniontype
              [ (typeref [ (typename T []) ]) (typeref [ (typename U []) ]) ])
            [
              (let $0)
              (assign (ref $0) (select () [ (typename bool []) ] (ref a)))
              (let $4)
              (assign
                (ref $4)
                (lambda
                  []
                  [ (param $1 () ()) ]
                  ()
                  [
                    (let $2)
                    (assign
                      (ref $2)
                      (select (param $1 () ()) [ (typename == []) ] (ref $1)))
                    (let $3)
                    (assign
                      (ref $3)
                      (select () [ (typename requires []) ] (ref $2)))
                    (free a)
                    (ref a)
                  ]))
              (let $9)
              (assign
                (ref $9)
                (lambda
                  []
                  [ (param $5 () ()) ]
                  ()
                  [
                    (let $6)
                    (assign
                      (ref $6)
                      (select (param $5 () ()) [ (typename == []) ] (ref $5)))
                    (let $7)
                    (assign
                      (ref $7)
                      (select () [ (typename requires []) ] (ref $6)))
                    (free b)
                    (let $8)
                    (assign
                      (ref $8)
                      (select (ref b) [ (typename apply []) ] ()))
                    (ref $8)
                  ]))
              (let $10)
              (assign (ref $10) (match (ref $0) [ (ref $4) (ref $9) ]))
              (ref $10)
            ]))
        (function
          not
          (lambda
            [ (typeparam T (typeref [ (typename ToBool []) ]) ()) ]
            [ (param a (typeref [ (typename T []) ]) ()) ]
            (typeref [ (typename Bool []) ])
            [
              (let $0)
              (assign (ref $0) (select () [ (typename bool []) ] (ref a)))
              (let $5)
              (assign
                (ref $5)
                (lambda
                  []
                  [ (param $1 () ()) ]
                  ()
                  [
                    (let $2)
                    (assign
                      (ref $2)
                      (select (param $1 () ()) [ (typename == []) ] (ref $1)))
                    (let $3)
                    (assign
                      (ref $3)
                      (select () [ (typename requires []) ] (ref $2)))
                    (let $4)
                    (assign (ref $4) (bool false))
                    (ref $4)
                  ]))
              (let $10)
              (assign
                (ref $10)
                (lambda
                  []
                  [ (param $6 () ()) ]
                  ()
                  [
                    (let $7)
                    (assign
                      (ref $7)
                      (select (param $6 () ()) [ (typename == []) ] (ref $6)))
                    (let $8)
                    (assign
                      (ref $8)
                      (select () [ (typename requires []) ] (ref $7)))
                    (let $9)
                    (assign (ref $9) (bool true))
                    (ref $9)
                  ]))
              (let $11)
              (assign (ref $11) (match (ref $0) [ (ref $5) (ref $10) ]))
              (ref $11)
            ]))
        (class Less [] () [])
        (class Equal [] () [])
        (class Greater [] () [])
        (typealias
          Compare
          []
          (uniontype
            [
              (typeref [ (typename Less []) ])
              (typeref [ (typename Equal []) ])
              (typeref [ (typename Greater []) ])
            ]))
        (interface
          Equatable
          [ (typeparam T () ()) ]
          ()
          [
            (function
              ==
              (lambda
                []
                [
                  (param self (Self ) ())
                  (param other (typeref [ (typename T []) ]) ())
                ]
                (typeref [ (typename Bool []) ])
                []))
            (function
              !=
              (lambda
                []
                [
                  (param self (Self ) ())
                  (param other (typeref [ (typename T []) ]) ())
                ]
                (typeref [ (typename Bool []) ])
                [
                  (let $0)
                  (assign
                    (ref $0)
                    (select (ref self) [ (typename == []) ] (ref other)))
                  (let $1)
                  (assign (ref $1) (select () [ (typename not []) ] (ref $0)))
                  (ref $1)
                ]))
          ])
        (interface
          Comparable
          [ (typeparam T () ()) ]
          (typeref [ (typename Equatable [ (typeref [ (typename T []) ]) ]) ])
          [
            (function
              <
              (lambda
                []
                [
                  (param self (Self ) ())
                  (param other (typeref [ (typename T []) ]) ())
                ]
                (typeref [ (typename Bool []) ])
                []))
            (function
              <=
              (lambda
                []
                [
                  (param self (Self ) ())
                  (param other (typeref [ (typename T []) ]) ())
                ]
                (typeref [ (typename Bool []) ])
                [
                  (let $0)
                  (assign
                    (ref $0)
                    (select (ref self) [ (typename < []) ] (ref other)))
                  (let $1)
                  (assign
                    (ref $1)
                    (select (ref self) [ (typename == []) ] (ref other)))
                  (let $2)
                  (assign
                    (ref $2)
                    (select (ref $0) [ (typename or []) ] (ref $1)))
                  (ref $2)
                ]))
            (function
              >=
              (lambda
                []
                [
                  (param self (Self ) ())
                  (param other (typeref [ (typename T []) ]) ())
                ]
                (typeref [ (typename Bool []) ])
                [
                  (let $0)
                  (assign
                    (ref $0)
                    (select (ref self) [ (typename < []) ] (ref other)))
                  (let $1)
                  (assign (ref $1) (select () [ (typename not []) ] (ref $0)))
                  (ref $1)
                ]))
            (function
              >
              (lambda
                []
                [
                  (param self (Self ) ())
                  (param other (typeref [ (typename T []) ]) ())
                ]
                (typeref [ (typename Bool []) ])
                [
                  (let $0)
                  (assign
                    (ref $0)
                    (select (ref self) [ (typename <= []) ] (ref other)))
                  (let $1)
                  (assign (ref $1) (select () [ (typename not []) ] (ref $0)))
                  (ref $1)
                ]))
            (function
              <=>
              (lambda
                []
                [
                  (param self (Self ) ())
                  (param other (typeref [ (typename T []) ]) ())
                ]
                (typeref [ (typename Compare []) ])
                [
                  (let $0)
                  (assign
                    (ref $0)
                    (select (ref self) [ (typename < []) ] (ref other)))
                  (let $1)
                  (assign (ref $1) (select () [ (typename if []) ] (ref $0)))
                  (let $3)
                  (assign
                    (ref $3)
                    (lambda
                      []
                      []
                      ()
                      [
                        (let $2)
                        (assign
                          (ref $2)
                          (select
                            ()
                            [ (typename Less []) (typename create []) ]
                            ()))
                        (ref $2)
                      ]))
                  (let $4)
                  (assign
                    (ref $4)
                    (select (ref $1) [ (typename apply []) ] (ref $3)))
                  (let $5)
                  (assign
                    (ref $5)
                    (select (ref self) [ (typename == []) ] (ref other)))
                  (let $6)
                  (assign
                    (ref $6)
                    (select (ref $4) [ (typename elseif []) ] (ref $5)))
                  (let $8)
                  (assign
                    (ref $8)
                    (lambda
                      []
                      []
                      ()
                      [
                        (let $7)
                        (assign
                          (ref $7)
                          (select
                            ()
                            [ (typename Equal []) (typename create []) ]
                            ()))
                        (ref $7)
                      ]))
                  (let $9)
                  (assign
                    (ref $9)
                    (select (ref $6) [ (typename apply []) ] (ref $8)))
                  (let $11)
                  (assign
                    (ref $11)
                    (lambda
                      []
                      []
                      ()
                      [
                        (let $10)
                        (assign
                          (ref $10)
                          (select
                            ()
                            [ (typename Greater []) (typename create []) ]
                            ()))
                        (ref $10)
                      ]))
                  (let $12)
                  (assign
                    (ref $12)
                    (select (ref $9) [ (typename else []) ] (ref $11)))
                  (ref $12)
                ]))
          ])
      ])
    (class
      $module-4
      []
      ()
      [
        (function
          ~
          (lambda
            [
              (typeparam T () ())
              (typeparamlist U () ())
              (typeparam V () ())
              (typeparam
                R
                (functiontype (typelist U) (typeref [ (typename V []) ]))
                ())
            ]
            [
              (param
                f
                (viewtype
                  (typeref [ (typename R []) ])
                  (functiontype
                    (tupletype [ (typeref [ (typename T []) ]) (typelist U) ])
                    (typeref [ (typename V []) ])))
                ())
              (param
                x
                (viewtype
                  (typeref [ (typename R []) ])
                  (typeref [ (typename T []) ]))
                ())
            ]
            (typeref [ (typename R []) ])
            [
              (let $2)
              (assign
                (ref $2)
                (lambda
                  []
                  [ (param y (typelist U) ()) ]
                  ()
                  [
                    (free f)
                    (free x)
                    (let $0)
                    (assign (ref $0) (tuple [ (ref x) (ref y) ]))
                    (let $1)
                    (assign
                      (ref $1)
                      (select (ref f) [ (typename apply []) ] (ref $0)))
                    (ref $1)
                  ]))
              (ref $2)
            ]))
        (function
          |>
          (lambda
            [ (typeparamlist T () ()) (typeparam U () ()) ]
            [
              (param x (typelist T) ())
              (param
                y
                (functiontype (typelist T) (typeref [ (typename U []) ]))
                ())
            ]
            (typeref [ (typename U []) ])
            [
              (let $0)
              (assign (ref $0) (select (ref y) [ (typename apply []) ] (ref x)))
              (ref $0)
            ]))
        (class FalseBranch [] () [])
        (function
          if
          (lambda
            [ (typeparam T () ()) ]
            [
              (param
                cond
                (functiontype (tupletype []) (typeref [ (typename Bool []) ]))
                ())
            ]
            (functiontype
              (functiontype (tupletype []) (typeref [ (typename T []) ]))
              (uniontype
                [
                  (typeref
                    [ (typename Done [ (typeref [ (typename T []) ]) ]) ])
                  (typeref [ (typename FalseBranch []) ])
                ]))
            [
              (let $13)
              (assign
                (ref $13)
                (lambda
                  []
                  [ (param ontrue () ()) ]
                  ()
                  [
                    (free cond)
                    (let $0)
                    (assign
                      (ref $0)
                      (select (ref cond) [ (typename apply []) ] ()))
                    (let $6)
                    (assign
                      (ref $6)
                      (lambda
                        []
                        [ (param $1 () ()) ]
                        ()
                        [
                          (let $2)
                          (assign
                            (ref $2)
                            (select
                              (param $1 () ())
                              [ (typename == []) ]
                              (ref $1)))
                          (let $3)
                          (assign
                            (ref $3)
                            (select () [ (typename requires []) ] (ref $2)))
                          (free ontrue)
                          (let $4)
                          (assign
                            (ref $4)
                            (select (ref ontrue) [ (typename apply []) ] ()))
                          (let $5)
                          (assign
                            (ref $5)
                            (select
                              ()
                              [ (typename Done []) (typename create []) ]
                              (ref $4)))
                          (ref $5)
                        ]))
                    (let $11)
                    (assign
                      (ref $11)
                      (lambda
                        []
                        [ (param $7 () ()) ]
                        ()
                        [
                          (let $8)
                          (assign
                            (ref $8)
                            (select
                              (param $7 () ())
                              [ (typename == []) ]
                              (ref $7)))
                          (let $9)
                          (assign
                            (ref $9)
                            (select () [ (typename requires []) ] (ref $8)))
                          (let $10)
                          (assign
                            (ref $10)
                            (select
                              ()
                              [ (typename FalseBranch []) (typename create []) ]
                              ()))
                          (ref $10)
                        ]))
                    (let $12)
                    (assign (ref $12) (match (ref $0) [ (ref $6) (ref $11) ]))
                    (ref $12)
                  ]))
              (ref $13)
            ]))
        (function
          elseif
          (lambda
            [ (typeparam T () ()) (typeparam U () ()) ]
            [
              (param
                prev
                (uniontype
                  [
                    (typeref
                      [ (typename Done [ (typeref [ (typename T []) ]) ]) ])
                    (typeref [ (typename FalseBranch []) ])
                  ])
                ())
              (param
                cond
                (functiontype (tupletype []) (typeref [ (typename Bool []) ]))
                ())
            ]
            (functiontype
              (functiontype (tupletype []) (typeref [ (typename U []) ]))
              (uniontype
                [
                  (typeref
                    [ (typename Done [ (typeref [ (typename T []) ]) ]) ])
                  (typeref
                    [ (typename Done [ (typeref [ (typename U []) ]) ]) ])
                ]))
            [
              (let $4)
              (assign
                (ref $4)
                (lambda
                  []
                  [ (param ontrue () ()) ]
                  ()
                  [
                    (free prev)
                    (let $2)
                    (assign
                      (ref $2)
                      (lambda
                        []
                        []
                        ()
                        [
                          (free cond)
                          (let $0)
                          (assign
                            (ref $0)
                            (select () [ (typename if []) ] (ref cond)))
                          (free ontrue)
                          (let $1)
                          (assign
                            (ref $1)
                            (select
                              (ref $0)
                              [ (typename apply []) ]
                              (ref ontrue)))
                          (ref $1)
                        ]))
                    (let $3)
                    (assign
                      (ref $3)
                      (select (ref prev) [ (typename else []) ] (ref $2)))
                    (ref $3)
                  ]))
              (ref $4)
            ]))
        (function
          else
          (lambda
            [ (typeparam T () ()) (typeparam U () ()) ]
            [
              (param
                prev
                (uniontype
                  [
                    (typeref
                      [ (typename Done [ (typeref [ (typename T []) ]) ]) ])
                    (typeref [ (typename FalseBranch []) ])
                  ])
                ())
              (param
                onfalse
                (functiontype (tupletype []) (typeref [ (typename U []) ]))
                ())
            ]
            (uniontype
              [
                (typeref [ (typename Done [ (typeref [ (typename T []) ]) ]) ])
                (typeref [ (typename Done [ (typeref [ (typename U []) ]) ]) ])
              ])
            [
              (let $5)
              (assign
                (ref $5)
                (lambda
                  []
                  [ (param $0 () ()) ]
                  ()
                  [
                    (let $1)
                    (assign
                      (ref $1)
                      (select (param $0 () ()) [ (typename == []) ] (ref $0)))
                    (let $2)
                    (assign
                      (ref $2)
                      (select () [ (typename requires []) ] (ref $1)))
                    (free onfalse)
                    (let $3)
                    (assign
                      (ref $3)
                      (select (ref onfalse) [ (typename apply []) ] ()))
                    (let $4)
                    (assign
                      (ref $4)
                      (select
                        ()
                        [ (typename Done []) (typename create []) ]
                        (ref $3)))
                    (ref $4)
                  ]))
              (let $6)
              (assign
                (ref $6)
                (lambda
                  []
                  [
                    (param
                      v
                      (typeref
                        [ (typename Done [ (typeref [ (typename T []) ]) ]) ])
                      ())
                  ]
                  ()
                  [ (ref v) ]))
              (let $7)
              (assign (ref $7) (match (ref prev) [ (ref $5) (ref $6) ]))
              (ref $7)
            ]))
        (using (typeref [ (modulename $module-3 []) ]))
        (interface Any [] () [])
        (class None [] () [])
        (class NoCatch [] () [])
        (class
          Done
          [ (typeparam T () (typeref [ (typename None []) ])) ]
          ()
          [
            (field result (typeref [ (typename T []) ]) ())
            (function
              create
              (lambda
                [
                  (typeparam
                    R
                    (typeref
                      [ (typename Done [ (typeref [ (typename T []) ]) ]) ])
                    ())
                ]
                [
                  (param
                    from
                    (viewtype
                      (typeref [ (typename R []) ])
                      (typeref [ (typename T []) ]))
                    (lambda
                      []
                      []
                      ()
                      [
                        (let $0)
                        (assign
                          (ref $0)
                          (select
                            ()
                            [ (typename None []) (typename create []) ]
                            ()))
                        (ref $0)
                      ]))
                ]
                (typeref [ (typename R []) ])
                [ (let $1) (assign (ref $1) (new () (ref from))) (ref $1) ]))
            (function
              apply
              (lambda
                [ (typeparam U () ()) ]
                [ (param x (typeref [ (typename U []) ]) ()) ]
                (typeref [ (typename U []) ])
                [ (ref x) ]))
          ])
        (class NoLabel [] () [])
        (class Break [ (typeparam L () ()) ] () [])
        (class Continue [ (typeparam L () ()) ] () [])
        (class
          break
          [ (typeparam L () (typeref [ (typename NoLabel []) ])) ]
          ()
          [
            (function
              create
              (lambda
                []
                []
                (throwtype
                  (typeref
                    [ (typename Break [ (typeref [ (typename L []) ]) ]) ]))
                [
                  (let $0)
                  (assign
                    (ref $0)
                    (select
                      ()
                      [
                        (typename Break [ (typeref [ (typename L []) ]) ])
                        (typename create [])
                      ]
                      ()))
                  (throw (ref $0))
                ]))
          ])
        (class
          continue
          [ (typeparam L () (typeref [ (typename NoLabel []) ])) ]
          ()
          [
            (function
              create
              (lambda
                []
                []
                (throwtype
                  (typeref
                    [ (typename Continue [ (typeref [ (typename L []) ]) ]) ]))
                [
                  (let $0)
                  (assign
                    (ref $0)
                    (select
                      ()
                      [
                        (typename Continue [ (typeref [ (typename L []) ]) ])
                        (typename create [])
                      ]
                      ()))
                  (throw (ref $0))
                ]))
          ])
        (function
          while
          (lambda
            [
              (typeparam L () (typeref [ (typename NoLabel []) ]))
              (typeparam T () ())
              (typeparam U () ())
            ]
            [
              (param
                cond
                (functiontype (tupletype []) (typeref [ (typename Bool []) ]))
                ())
            ]
            (functiontype
              (functiontype
                (tupletype [])
                (uniontype
                  [
                    (typeref [ (typename T []) ])
                    (throwtype (typeref [ (typename U []) ]))
                  ]))
              (uniontype
                [
                  (typeref [ (typename Done []) ])
                  (throwtype (typeref [ (typename U []) ]))
                ]))
            [
              (let $22)
              (assign
                (ref $22)
                (lambda
                  []
                  [ (param body () ()) ]
                  ()
                  [
                    (free cond)
                    (let $0)
                    (assign
                      (ref $0)
                      (select (ref cond) [ (typename apply []) ] ()))
                    (let $19)
                    (assign
                      (ref $19)
                      (lambda
                        []
                        [ (param $1 () ()) ]
                        ()
                        [
                          (let $2)
                          (assign
                            (ref $2)
                            (select
                              (param $1 () ())
                              [ (typename == []) ]
                              (ref $1)))
                          (let $3)
                          (assign
                            (ref $3)
                            (select () [ (typename requires []) ] (ref $2)))
                          (let $6)
                          (assign
                            (ref $6)
                            (lambda
                              []
                              []
                              ()
                              [
                                (free body)
                                (let $4)
                                (assign
                                  (ref $4)
                                  (select (ref body) [ (typename apply []) ] ()))
                                (let $5)
                                (assign
                                  (ref $5)
                                  (select
                                    ()
                                    [
                                      (typename continue [])
                                      (typename create [])
                                    ]
                                    ()))
                                (ref $5)
                              ]))
                          (let $11)
                          (assign
                            (ref $11)
                            (lambda
                              []
                              [ (param $7 () ()) ]
                              ()
                              [
                                (let $8)
                                (assign
                                  (ref $8)
                                  (select
                                    (param $7 () ())
                                    [ (typename == []) ]
                                    (ref $7)))
                                (let $9)
                                (assign
                                  (ref $9)
                                  (select
                                    ()
                                    [ (typename requires []) ]
                                    (ref $8)))
                                (let $10)
                                (assign
                                  (ref $10)
                                  (select
                                    ()
                                    [ (typename Done []) (typename create []) ]
                                    ()))
                                (ref $10)
                              ]))
                          (let $17)
                          (assign
                            (ref $17)
                            (lambda
                              []
                              [ (param $12 () ()) ]
                              ()
                              [
                                (let $13)
                                (assign
                                  (ref $13)
                                  (select
                                    (param $12 () ())
                                    [ (typename == []) ]
                                    (ref $12)))
                                (let $14)
                                (assign
                                  (ref $14)
                                  (select
                                    ()
                                    [ (typename requires []) ]
                                    (ref $13)))
                                (free cond)
                                (let $15)
                                (assign
                                  (ref $15)
                                  (select
                                    ()
                                    [
                                      (typename
                                        while
                                        [ (typeref [ (typename L []) ]) ])
                                    ]
                                    (ref cond)))
                                (free body)
                                (let $16)
                                (assign
                                  (ref $16)
                                  (select
                                    (ref $15)
                                    [ (typename apply []) ]
                                    (ref body)))
                                (ref $16)
                              ]))
                          (let $18)
                          (assign
                            (ref $18)
                            (try (ref $6) [ (ref $11) (ref $17) ]))
                          (ref $18)
                        ]))
                    (let $20)
                    (assign (ref $20) (lambda [] [] () []))
                    (let $21)
                    (assign (ref $21) (match (ref $0) [ (ref $19) (ref $20) ]))
                    (ref $21)
                  ]))
              (ref $22)
            ]))
        (class NoMatch [] () [])
        (function
          as
          (lambda
            [ (typeparam T () ()) (typeparam U () ()) ]
            [ (param value (typeref [ (typename U []) ]) ()) ]
            (uniontype
              [
                (typeref [ (typename T []) ])
                (throwtype (typeref [ (typename NoMatch []) ]))
              ])
            [
              (let $0)
              (assign
                (ref $0)
                (lambda
                  []
                  [ (param x (typeref [ (typename T []) ]) ()) ]
                  ()
                  [ (ref x) ]))
              (let $2)
              (assign
                (ref $2)
                (lambda
                  []
                  []
                  ()
                  [
                    (let $1)
                    (assign
                      (ref $1)
                      (select
                        ()
                        [ (typename NoMatch []) (typename create []) ]
                        ()))
                    (throw (ref $1))
                  ]))
              (let $3)
              (assign (ref $3) (match (ref value) [ (ref $0) (ref $2) ]))
              (ref $3)
            ]))
        (function
          requires
          (lambda
            []
            [ (param pred (typeref [ (typename Bool []) ]) ()) ]
            (uniontype
              [
                (typeref [ (typename None []) ])
                (throwtype (typeref [ (typename NoMatch []) ]))
              ])
            [
              (let $0)
              (assign (ref $0) (select () [ (typename not []) ] (ref pred)))
              (let $1)
              (assign (ref $1) (select () [ (typename if []) ] (ref $0)))
              (let $3)
              (assign
                (ref $3)
                (lambda
                  []
                  []
                  ()
                  [
                    (let $2)
                    (assign
                      (ref $2)
                      (select
                        ()
                        [ (typename NoMatch []) (typename create []) ]
                        ()))
                    (throw (ref $2))
                  ]))
              (let $4)
              (assign
                (ref $4)
                (select (ref $1) [ (typename apply []) ] (ref $3)))
              (ref $4)
            ]))
        (class
          OrEquals
          [ (typeparam T1 () ()) (typeparam T2 () ()) ]
          ()
          [
            (field
              a
              (typeref
                [ (typename Equatable [ (typeref [ (typename T1 []) ]) ]) ])
              ())
            (field
              b
              (typeref
                [ (typename Equatable [ (typeref [ (typename T2 []) ]) ]) ])
              ())
            (function
              ==
              (lambda
                []
                [
                  (param
                    self
                    (typeref
                      [
                        (typename
                          OrEquals
                          [
                            (typeref [ (typename T1 []) ])
                            (typeref [ (typename T2 []) ])
                          ])
                      ])
                    ())
                  (param
                    x
                    (uniontype
                      [
                        (typeref [ (typename T1 []) ])
                        (typeref [ (typename T2 []) ])
                      ])
                    ())
                ]
                (typeref [ (typename Bool []) ])
                [
                  (let $2)
                  (assign
                    (ref $2)
                    (lambda
                      []
                      [ (param y (typeref [ (typename T1 []) ]) ()) ]
                      ()
                      [
                        (free self)
                        (let $0)
                        (assign
                          (ref $0)
                          (select (ref self) [ (typename a []) ] ()))
                        (let $1)
                        (assign
                          (ref $1)
                          (select (ref $0) [ (typename == []) ] (ref y)))
                        (ref $1)
                      ]))
                  (let $5)
                  (assign
                    (ref $5)
                    (lambda
                      []
                      [ (param y (typeref [ (typename T2 []) ]) ()) ]
                      ()
                      [
                        (free self)
                        (let $3)
                        (assign
                          (ref $3)
                          (select (ref self) [ (typename b []) ] ()))
                        (let $4)
                        (assign
                          (ref $4)
                          (select (ref $3) [ (typename == []) ] (ref y)))
                        (ref $4)
                      ]))
                  (let $7)
                  (assign
                    (ref $7)
                    (lambda
                      []
                      []
                      ()
                      [ (let $6) (assign (ref $6) (bool false)) (ref $6) ]))
                  (let $8)
                  (assign
                    (ref $8)
                    (match (ref x) [ (ref $2) (ref $5) (ref $7) ]))
                  (ref $8)
                ]))
          ])
        (function
          |
          (lambda
            [ (typeparam T1 () ()) (typeparam T2 () ()) ]
            [
              (param
                e1
                (typeref
                  [ (typename Equatable [ (typeref [ (typename T1 []) ]) ]) ])
                ())
              (param
                e2
                (typeref
                  [ (typename Equatable [ (typeref [ (typename T2 []) ]) ]) ])
                ())
            ]
            (typeref
              [
                (typename
                  OrEquals
                  [
                    (typeref [ (typename T1 []) ])
                    (typeref [ (typename T2 []) ])
                  ])
              ])
            [
              (let $0)
              (assign (ref $0) (tuple [ (ref e1) (ref e2) ]))
              (let $1)
              (assign
                (ref $1)
                (select
                  ()
                  [ (typename OrEquals []) (typename create []) ]
                  (ref $0)))
              (ref $1)
            ]))
        (class
          Return
          [ (typeparam T () ()) ]
          ()
          [ (field value (typeref [ (typename T []) ]) ()) ])
        (class
          return
          [ (typeparam T () (typeref [ (typename None []) ])) ]
          ()
          [
            (function
              create
              (lambda
                []
                [
                  (param
                    x
                    (typeref [ (typename T []) ])
                    (lambda
                      []
                      []
                      ()
                      [
                        (let $0)
                        (assign
                          (ref $0)
                          (select
                            ()
                            [ (typename None []) (typename create []) ]
                            ()))
                        (ref $0)
                      ]))
                ]
                (throwtype
                  (typeref
                    [ (typename Return [ (typeref [ (typename T []) ]) ]) ]))
                [
                  (let $1)
                  (assign
                    (ref $1)
                    (select
                      ()
                      [
                        (typename Return [ (typeref [ (typename T []) ]) ])
                        (typename create [])
                      ]
                      (ref x)))
                  (throw (ref $1))
                ]))
          ])
      ])
  ])
