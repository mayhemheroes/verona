(class
  ()
  []
  ()
  [
    (class
      $module-0
      []
      ()
      [
        (class Cown [ (typeparam T () ()) ] () [])
        (class A [] () [])
        (class B [] () [])
        (function bar (lambda [] [] () []))
        (function
          foo
          (lambda
            []
            [
              (param
                a
                (typeref [ (typename Cown [ (typeref [ (typename A []) ]) ]) ])
                ())
              (param
                b
                (typeref [ (typename Cown [ (typeref [ (typename B []) ]) ]) ])
                ())
            ]
            ()
            [
              (let $0)
              (assign (ref $0) (lambda [] [] () []))
              (let $1)
              (assign (ref $1) (when (ref a) (ref $0)))
              (let $2)
              (assign (ref $2) (tuple [ (ref a) (ref b) ]))
              (let $7)
              (assign
                (ref $7)
                (lambda
                  []
                  []
                  ()
                  [
                    (let $3)
                    (assign (ref $3) (select () [ (typename bar []) ] ()))
                    (let $4)
                    (assign (ref $4) (lambda [] [] () []))
                    (let $5)
                    (assign (ref $5) (when (ref $3) (ref $4)))
                    (free b)
                    (let $6)
                    (assign
                      (ref $6)
                      (select (ref $5) [ (typename return []) ] (ref b)))
                    (ref $6)
                  ]))
              (let $8)
              (assign (ref $8) (when (ref $2) (ref $7)))
              (let $9)
              (assign
                (ref $9)
                (select (ref $1) [ (typename apply []) ] (ref $8)))
              (ref $9)
            ]))
      ])
  ])
