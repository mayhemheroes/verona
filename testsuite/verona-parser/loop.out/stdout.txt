(class
  ()
  []
  ()
  [
    (class
      $module-0
      []
      ()
      [
        (using (typeref [ (modulename $module-1 []) ]))
        (function
          foo
          (lambda
            [ (typeparam T () ()) ]
            [ (param a (typeref [ (typename T []) ]) ()) ]
            ()
            []))
        (function
          f
          (lambda
            [ (typeparam T () ()) ]
            [ (param x (typeref [ (typename T []) ]) ()) ]
            ()
            [
              (var a (infertype $0))
              (let $0 (infertype $41))
              (assign (ref $0) (int 0))
              (assign (ref a) (ref $0))
              (let $3 (infertype $44))
              (assign
                (ref $3)
                (lambda
                  []
                  []
                  (infertype $1)
                  [
                    (free a)
                    (let $1 (infertype $42))
                    (assign (ref $1) (int 5))
                    (let $2 (infertype $43))
                    (assign
                      (ref $2)
                      (select (ref a) [ (typename < []) ] (ref $1)))
                    (ref $2)
                  ]))
              (let $4 (infertype $45))
              (assign (ref $4) (select () [ (typename while []) ] (ref $3)))
              (let $18 (infertype $59))
              (assign
                (ref $18)
                (lambda
                  []
                  []
                  (infertype $2)
                  [
                    (free a)
                    (free a)
                    (let $5 (infertype $46))
                    (assign (ref $5) (int 1))
                    (let $6 (infertype $47))
                    (assign
                      (ref $6)
                      (select (ref a) [ (typename + []) ] (ref $5)))
                    (assign (ref a) (ref $6))
                    (free a)
                    (let $7 (infertype $48))
                    (assign (ref $7) (int 2))
                    (let $8 (infertype $49))
                    (assign
                      (ref $8)
                      (select (ref a) [ (typename < []) ] (ref $7)))
                    (let $9 (infertype $50))
                    (assign (ref $9) (select () [ (typename if []) ] (ref $8)))
                    (let $13 (infertype $54))
                    (assign
                      (ref $13)
                      (lambda
                        []
                        []
                        (infertype $3)
                        [
                          (free a)
                          (free a)
                          (let $10 (infertype $51))
                          (assign (ref $10) (int 1))
                          (let $11 (infertype $52))
                          (assign
                            (ref $11)
                            (select (ref a) [ (typename + []) ] (ref $10)))
                          (assign (ref a) (ref $11))
                          (let $12 (infertype $53))
                          (assign
                            (ref $12)
                            (select
                              ()
                              [ (typename continue []) (typename create []) ]
                              ()))
                          (ref $12)
                        ]))
                    (let $14 (infertype $55))
                    (assign
                      (ref $14)
                      (select (ref $9) [ (typename apply []) ] (ref $13)))
                    (let $16 (infertype $57))
                    (assign
                      (ref $16)
                      (lambda
                        []
                        []
                        (infertype $4)
                        [
                          (let $15 (infertype $56))
                          (assign
                            (ref $15)
                            (select
                              ()
                              [ (typename break []) (typename create []) ]
                              ()))
                          (ref $15)
                        ]))
                    (let $17 (infertype $58))
                    (assign
                      (ref $17)
                      (select (ref $14) [ (typename else []) ] (ref $16)))
                    (ref $17)
                  ]))
              (let $19 (infertype $60))
              (assign
                (ref $19)
                (select (ref $4) [ (typename apply []) ] (ref $18)))
              (let $20 (infertype $61))
              (assign
                (ref $20)
                (select (ref $19) [ (typename for []) ] (ref x)))
              (let $22 (infertype $63))
              (assign
                (ref $22)
                (lambda
                  []
                  [ (param b (infertype $6) ()) ]
                  (infertype $5)
                  [
                    (let $21 (infertype $62))
                    (assign (ref $21) (select () [ (typename foo []) ] (ref b)))
                    (ref $21)
                  ]))
              (let $23 (infertype $64))
              (assign
                (ref $23)
                (select (ref $20) [ (typename apply []) ] (ref $22)))
              (let $24 (infertype $65))
              (assign
                (ref $24)
                (select
                  (ref $23)
                  [ (typename return []) (typename create []) ]
                  (ref a)))
              (ref $24)
            ]))
      ])
    (class
      $module-1
      []
      ()
      [
        (function
          ~
          (lambda
            [
              (typeparam T () ())
              (typeparamlist U () ())
              (typeparam V () ())
              (typeparam
                R
                (functiontype (typelist U) (typeref [ (typename V []) ]))
                ())
            ]
            [
              (param
                f
                (viewtype
                  (typeref [ (typename R []) ])
                  (functiontype
                    (tupletype [ (typeref [ (typename T []) ]) (typelist U) ])
                    (typeref [ (typename V []) ])))
                ())
              (param
                x
                (viewtype
                  (typeref [ (typename R []) ])
                  (typeref [ (typename T []) ]))
                ())
            ]
            (typeref [ (typename R []) ])
            [
              (let $2 (infertype $68))
              (assign
                (ref $2)
                (lambda
                  []
                  [ (param y (typelist U) ()) ]
                  (infertype $7)
                  [
                    (free f)
                    (free x)
                    (let
                      $0
                      (tupletype
                        [
                          (viewtype
                            (typeref [ (typename R []) ])
                            (typeref [ (typename T []) ]))
                          (typelist U)
                        ]))
                    (assign (ref $0) (tuple [ (ref x) (ref y) ]))
                    (let $1 (infertype $67))
                    (assign
                      (ref $1)
                      (select (ref f) [ (typename apply []) ] (ref $0)))
                    (ref $1)
                  ]))
              (ref $2)
            ]))
        (function
          |>
          (lambda
            [ (typeparamlist T () ()) (typeparam U () ()) ]
            [
              (param x (typelist T) ())
              (param
                y
                (functiontype (typelist T) (typeref [ (typename U []) ]))
                ())
            ]
            (typeref [ (typename U []) ])
            [
              (let $0 (infertype $69))
              (assign (ref $0) (select (ref y) [ (typename apply []) ] (ref x)))
              (ref $0)
            ]))
        (using (typeref [ (modulename $module-2 []) ]))
        (class
          FalseBranch
          []
          ()
          [
            (function
              create
              (lambda
                []
                []
                (isecttype [ (typeref [ (typename FalseBranch []) ]) (imm ) ])
                [
                  (let $0 (infertype $70))
                  (assign (ref $0) (new () ()))
                  (ref $0)
                ]))
          ])
        (function
          if
          (lambda
            [ (typeparam T () ()) ]
            [
              (param
                cond
                (functiontype (tupletype []) (typeref [ (typename Bool []) ]))
                ())
            ]
            (functiontype
              (functiontype (tupletype []) (typeref [ (typename T []) ]))
              (uniontype
                [
                  (typeref
                    [ (typename Done [ (typeref [ (typename T []) ]) ]) ])
                  (typeref [ (typename FalseBranch []) ])
                ]))
            [
              (let $13 (infertype $82))
              (assign
                (ref $13)
                (lambda
                  []
                  [ (param ontrue (infertype $9) ()) ]
                  (infertype $8)
                  [
                    (free cond)
                    (let $0 (infertype $71))
                    (assign
                      (ref $0)
                      (select (ref cond) [ (typename apply []) ] ()))
                    (let $6 (infertype $76))
                    (assign
                      (ref $6)
                      (lambda
                        []
                        [ (param $1 () ()) ]
                        (infertype $10)
                        [
                          (let $2 (infertype $72))
                          (assign
                            (ref $2)
                            (select
                              (param $1 () ())
                              [ (typename == []) ]
                              (ref $1)))
                          (let $3 (infertype $73))
                          (assign
                            (ref $3)
                            (select () [ (typename requires []) ] (ref $2)))
                          (free ontrue)
                          (let $4 (infertype $74))
                          (assign
                            (ref $4)
                            (select (ref ontrue) [ (typename apply []) ] ()))
                          (let $5 (infertype $75))
                          (assign
                            (ref $5)
                            (select
                              ()
                              [ (typename Done []) (typename create []) ]
                              (ref $4)))
                          (ref $5)
                        ]))
                    (let $11 (infertype $80))
                    (assign
                      (ref $11)
                      (lambda
                        []
                        [ (param $7 () ()) ]
                        (infertype $11)
                        [
                          (let $8 (infertype $77))
                          (assign
                            (ref $8)
                            (select
                              (param $7 () ())
                              [ (typename == []) ]
                              (ref $7)))
                          (let $9 (infertype $78))
                          (assign
                            (ref $9)
                            (select () [ (typename requires []) ] (ref $8)))
                          (let $10 (infertype $79))
                          (assign
                            (ref $10)
                            (select
                              ()
                              [ (typename FalseBranch []) (typename create []) ]
                              ()))
                          (ref $10)
                        ]))
                    (let $12 (infertype $81))
                    (assign (ref $12) (match (ref $0) [ (ref $6) (ref $11) ]))
                    (ref $12)
                  ]))
              (ref $13)
            ]))
        (function
          elseif
          (lambda
            [ (typeparam T () ()) (typeparam U () ()) ]
            [
              (param
                prev
                (uniontype
                  [
                    (typeref
                      [ (typename Done [ (typeref [ (typename T []) ]) ]) ])
                    (typeref [ (typename FalseBranch []) ])
                  ])
                ())
              (param
                cond
                (functiontype (tupletype []) (typeref [ (typename Bool []) ]))
                ())
            ]
            (functiontype
              (functiontype (tupletype []) (typeref [ (typename U []) ]))
              (uniontype
                [
                  (typeref
                    [ (typename Done [ (typeref [ (typename T []) ]) ]) ])
                  (typeref
                    [ (typename Done [ (typeref [ (typename U []) ]) ]) ])
                ]))
            [
              (let $4 (infertype $87))
              (assign
                (ref $4)
                (lambda
                  []
                  [ (param ontrue (infertype $13) ()) ]
                  (infertype $12)
                  [
                    (free prev)
                    (let $2 (infertype $85))
                    (assign
                      (ref $2)
                      (lambda
                        []
                        []
                        (infertype $14)
                        [
                          (free cond)
                          (let $0 (infertype $83))
                          (assign
                            (ref $0)
                            (select () [ (typename if []) ] (ref cond)))
                          (free ontrue)
                          (let $1 (infertype $84))
                          (assign
                            (ref $1)
                            (select
                              (ref $0)
                              [ (typename apply []) ]
                              (ref ontrue)))
                          (ref $1)
                        ]))
                    (let $3 (infertype $86))
                    (assign
                      (ref $3)
                      (select (ref prev) [ (typename else []) ] (ref $2)))
                    (ref $3)
                  ]))
              (ref $4)
            ]))
        (function
          else
          (lambda
            [ (typeparam T () ()) (typeparam U () ()) ]
            [
              (param
                prev
                (uniontype
                  [
                    (typeref
                      [ (typename Done [ (typeref [ (typename T []) ]) ]) ])
                    (typeref [ (typename FalseBranch []) ])
                  ])
                ())
              (param
                onfalse
                (functiontype (tupletype []) (typeref [ (typename U []) ]))
                ())
            ]
            (uniontype
              [
                (typeref [ (typename Done [ (typeref [ (typename T []) ]) ]) ])
                (typeref [ (typename Done [ (typeref [ (typename U []) ]) ]) ])
              ])
            [
              (let $5 (infertype $92))
              (assign
                (ref $5)
                (lambda
                  []
                  [ (param $0 () ()) ]
                  (infertype $15)
                  [
                    (let $1 (infertype $88))
                    (assign
                      (ref $1)
                      (select (param $0 () ()) [ (typename == []) ] (ref $0)))
                    (let $2 (infertype $89))
                    (assign
                      (ref $2)
                      (select () [ (typename requires []) ] (ref $1)))
                    (free onfalse)
                    (let $3 (infertype $90))
                    (assign
                      (ref $3)
                      (select (ref onfalse) [ (typename apply []) ] ()))
                    (let $4 (infertype $91))
                    (assign
                      (ref $4)
                      (select
                        ()
                        [ (typename Done []) (typename create []) ]
                        (ref $3)))
                    (ref $4)
                  ]))
              (let $6 (infertype $93))
              (assign
                (ref $6)
                (lambda
                  []
                  [
                    (param
                      v
                      (typeref
                        [ (typename Done [ (typeref [ (typename T []) ]) ]) ])
                      ())
                  ]
                  (infertype $16)
                  [ (ref v) ]))
              (let $7 (infertype $94))
              (assign (ref $7) (match (ref prev) [ (ref $5) (ref $6) ]))
              (ref $7)
            ]))
        (using (typeref [ (modulename $module-2 []) ]))
        (interface Any [] () [])
        (class
          None
          []
          ()
          [
            (function
              create
              (lambda
                []
                []
                (isecttype [ (typeref [ (typename None []) ]) (imm ) ])
                [
                  (let $0 (infertype $95))
                  (assign (ref $0) (new () ()))
                  (ref $0)
                ]))
          ])
        (class
          NoCatch
          []
          ()
          [
            (function
              create
              (lambda
                []
                []
                (isecttype [ (typeref [ (typename NoCatch []) ]) (imm ) ])
                [
                  (let $0 (infertype $96))
                  (assign (ref $0) (new () ()))
                  (ref $0)
                ]))
          ])
        (class
          Done
          [ (typeparam T () (typeref [ (typename None []) ])) ]
          ()
          [
            (field result (typeref [ (typename T []) ]) ())
            (function
              create
              (lambda
                [
                  (typeparam
                    R
                    (typeref
                      [ (typename Done [ (typeref [ (typename T []) ]) ]) ])
                    ())
                ]
                [
                  (param
                    from
                    (viewtype
                      (typeref [ (typename R []) ])
                      (typeref [ (typename T []) ]))
                    (lambda
                      []
                      []
                      (infertype $17)
                      [
                        (let $0 (infertype $97))
                        (assign
                          (ref $0)
                          (select
                            ()
                            [ (typename None []) (typename create []) ]
                            ()))
                        (ref $0)
                      ]))
                ]
                (typeref [ (typename R []) ])
                [
                  (let $1 (infertype $98))
                  (assign (ref $1) (new () (ref from)))
                  (ref $1)
                ]))
            (function
              apply
              (lambda
                [ (typeparam U () ()) ]
                [ (param x (typeref [ (typename U []) ]) ()) ]
                (typeref [ (typename U []) ])
                [ (ref x) ]))
          ])
        (using (typeref [ (modulename $module-2 []) ]))
        (class
          NoLabel
          []
          ()
          [
            (function
              create
              (lambda
                []
                []
                (isecttype [ (typeref [ (typename NoLabel []) ]) (imm ) ])
                [
                  (let $0 (infertype $99))
                  (assign (ref $0) (new () ()))
                  (ref $0)
                ]))
          ])
        (class
          Break
          [ (typeparam L () ()) ]
          ()
          [
            (function
              create
              (lambda
                []
                []
                (isecttype
                  [
                    (typeref
                      [ (typename Break [ (typeref [ (typename L []) ]) ]) ])
                    (imm )
                  ])
                [
                  (let $0 (infertype $100))
                  (assign (ref $0) (new () ()))
                  (ref $0)
                ]))
          ])
        (class
          Continue
          [ (typeparam L () ()) ]
          ()
          [
            (function
              create
              (lambda
                []
                []
                (isecttype
                  [
                    (typeref
                      [ (typename Continue [ (typeref [ (typename L []) ]) ]) ])
                    (imm )
                  ])
                [
                  (let $0 (infertype $101))
                  (assign (ref $0) (new () ()))
                  (ref $0)
                ]))
          ])
        (class
          break
          [ (typeparam L () (typeref [ (typename NoLabel []) ])) ]
          ()
          [
            (function
              create
              (lambda
                []
                []
                (throwtype
                  (typeref
                    [ (typename Break [ (typeref [ (typename L []) ]) ]) ]))
                [
                  (let $0 (infertype $102))
                  (assign
                    (ref $0)
                    (select
                      ()
                      [
                        (typename Break [ (typeref [ (typename L []) ]) ])
                        (typename create [])
                      ]
                      ()))
                  (throw (ref $0))
                ]))
          ])
        (class
          continue
          [ (typeparam L () (typeref [ (typename NoLabel []) ])) ]
          ()
          [
            (function
              create
              (lambda
                []
                []
                (throwtype
                  (typeref
                    [ (typename Continue [ (typeref [ (typename L []) ]) ]) ]))
                [
                  (let $0 (infertype $103))
                  (assign
                    (ref $0)
                    (select
                      ()
                      [
                        (typename Continue [ (typeref [ (typename L []) ]) ])
                        (typename create [])
                      ]
                      ()))
                  (throw (ref $0))
                ]))
          ])
        (function
          while
          (lambda
            [
              (typeparam L () (typeref [ (typename NoLabel []) ]))
              (typeparam T () ())
              (typeparam U () ())
            ]
            [
              (param
                cond
                (functiontype (tupletype []) (typeref [ (typename Bool []) ]))
                ())
            ]
            (functiontype
              (functiontype
                (tupletype [])
                (uniontype
                  [
                    (typeref [ (typename T []) ])
                    (throwtype (typeref [ (typename U []) ]))
                  ]))
              (uniontype
                [
                  (typeref [ (typename Done []) ])
                  (throwtype (typeref [ (typename U []) ]))
                ]))
            [
              (let $22 (infertype $123))
              (assign
                (ref $22)
                (lambda
                  []
                  [ (param body (infertype $19) ()) ]
                  (infertype $18)
                  [
                    (free cond)
                    (let $0 (infertype $104))
                    (assign
                      (ref $0)
                      (select (ref cond) [ (typename apply []) ] ()))
                    (let $19 (infertype $120))
                    (assign
                      (ref $19)
                      (lambda
                        []
                        [ (param $1 () ()) ]
                        (infertype $20)
                        [
                          (let $2 (infertype $105))
                          (assign
                            (ref $2)
                            (select
                              (param $1 () ())
                              [ (typename == []) ]
                              (ref $1)))
                          (let $3 (infertype $106))
                          (assign
                            (ref $3)
                            (select () [ (typename requires []) ] (ref $2)))
                          (let $6 (infertype $109))
                          (assign
                            (ref $6)
                            (lambda
                              []
                              []
                              (infertype $21)
                              [
                                (free body)
                                (let $4 (infertype $107))
                                (assign
                                  (ref $4)
                                  (select (ref body) [ (typename apply []) ] ()))
                                (let $5 (infertype $108))
                                (assign
                                  (ref $5)
                                  (select
                                    ()
                                    [
                                      (typename continue [])
                                      (typename create [])
                                    ]
                                    ()))
                                (ref $5)
                              ]))
                          (let $11 (infertype $113))
                          (assign
                            (ref $11)
                            (lambda
                              []
                              [ (param $7 () ()) ]
                              (infertype $22)
                              [
                                (let $8 (infertype $110))
                                (assign
                                  (ref $8)
                                  (select
                                    (param $7 () ())
                                    [ (typename == []) ]
                                    (ref $7)))
                                (let $9 (infertype $111))
                                (assign
                                  (ref $9)
                                  (select
                                    ()
                                    [ (typename requires []) ]
                                    (ref $8)))
                                (let $10 (infertype $112))
                                (assign
                                  (ref $10)
                                  (select
                                    ()
                                    [ (typename Done []) (typename create []) ]
                                    ()))
                                (ref $10)
                              ]))
                          (let $17 (infertype $118))
                          (assign
                            (ref $17)
                            (lambda
                              []
                              [ (param $12 () ()) ]
                              (infertype $23)
                              [
                                (let $13 (infertype $114))
                                (assign
                                  (ref $13)
                                  (select
                                    (param $12 () ())
                                    [ (typename == []) ]
                                    (ref $12)))
                                (let $14 (infertype $115))
                                (assign
                                  (ref $14)
                                  (select
                                    ()
                                    [ (typename requires []) ]
                                    (ref $13)))
                                (free cond)
                                (let $15 (infertype $116))
                                (assign
                                  (ref $15)
                                  (select
                                    ()
                                    [
                                      (typename
                                        while
                                        [ (typeref [ (typename L []) ]) ])
                                    ]
                                    (ref cond)))
                                (free body)
                                (let $16 (infertype $117))
                                (assign
                                  (ref $16)
                                  (select
                                    (ref $15)
                                    [ (typename apply []) ]
                                    (ref body)))
                                (ref $16)
                              ]))
                          (let $18 (infertype $119))
                          (assign
                            (ref $18)
                            (try (ref $6) [ (ref $11) (ref $17) ]))
                          (ref $18)
                        ]))
                    (let $20 (infertype $121))
                    (assign (ref $20) (lambda [] [] (infertype $24) []))
                    (let $21 (infertype $122))
                    (assign (ref $21) (match (ref $0) [ (ref $19) (ref $20) ]))
                    (ref $21)
                  ]))
              (ref $22)
            ]))
        (using (typeref [ (modulename $module-2 []) ]))
        (class
          NoMatch
          []
          ()
          [
            (function
              create
              (lambda
                []
                []
                (isecttype [ (typeref [ (typename NoMatch []) ]) (imm ) ])
                [
                  (let $0 (infertype $124))
                  (assign (ref $0) (new () ()))
                  (ref $0)
                ]))
          ])
        (function
          as
          (lambda
            [ (typeparam T () ()) (typeparam U () ()) ]
            [ (param value (typeref [ (typename U []) ]) ()) ]
            (uniontype
              [
                (typeref [ (typename T []) ])
                (throwtype (typeref [ (typename NoMatch []) ]))
              ])
            [
              (let $0 (infertype $125))
              (assign
                (ref $0)
                (lambda
                  []
                  [ (param x (typeref [ (typename T []) ]) ()) ]
                  (infertype $25)
                  [ (ref x) ]))
              (let $2 (infertype $127))
              (assign
                (ref $2)
                (lambda
                  []
                  []
                  (infertype $26)
                  [
                    (let $1 (infertype $126))
                    (assign
                      (ref $1)
                      (select
                        ()
                        [ (typename NoMatch []) (typename create []) ]
                        ()))
                    (throw (ref $1))
                  ]))
              (let $3 (infertype $128))
              (assign (ref $3) (match (ref value) [ (ref $0) (ref $2) ]))
              (ref $3)
            ]))
        (function
          requires
          (lambda
            []
            [ (param pred (typeref [ (typename Bool []) ]) ()) ]
            (uniontype
              [
                (typeref [ (typename None []) ])
                (throwtype (typeref [ (typename NoMatch []) ]))
              ])
            [
              (let $0 (infertype $129))
              (assign (ref $0) (select () [ (typename not []) ] (ref pred)))
              (let $1 (infertype $130))
              (assign (ref $1) (select () [ (typename if []) ] (ref $0)))
              (let $3 (infertype $132))
              (assign
                (ref $3)
                (lambda
                  []
                  []
                  (infertype $27)
                  [
                    (let $2 (infertype $131))
                    (assign
                      (ref $2)
                      (select
                        ()
                        [ (typename NoMatch []) (typename create []) ]
                        ()))
                    (throw (ref $2))
                  ]))
              (let $4 (infertype $133))
              (assign
                (ref $4)
                (select (ref $1) [ (typename apply []) ] (ref $3)))
              (ref $4)
            ]))
        (class
          OrEquals
          [ (typeparam T1 () ()) (typeparam T2 () ()) ]
          ()
          [
            (field
              a
              (typeref
                [ (typename Equatable [ (typeref [ (typename T1 []) ]) ]) ])
              ())
            (field
              b
              (typeref
                [ (typename Equatable [ (typeref [ (typename T2 []) ]) ]) ])
              ())
            (function
              create
              (lambda
                [
                  (typeparam
                    S
                    (typeref
                      [
                        (typename
                          OrEquals
                          [
                            (typeref [ (typename T1 []) ])
                            (typeref [ (typename T2 []) ])
                          ])
                      ])
                    ())
                ]
                [
                  (param
                    a
                    (viewtype
                      (typeref [ (typename S []) ])
                      (typeref
                        [
                          (typename
                            Equatable
                            [ (typeref [ (typename T1 []) ]) ])
                        ]))
                    ())
                  (param
                    b
                    (viewtype
                      (typeref [ (typename S []) ])
                      (typeref
                        [
                          (typename
                            Equatable
                            [ (typeref [ (typename T2 []) ]) ])
                        ]))
                    ())
                ]
                (typeref [ (typename S []) ])
                [
                  (let
                    $0
                    (tupletype
                      [
                        (viewtype
                          (typeref [ (typename S []) ])
                          (typeref
                            [
                              (typename
                                Equatable
                                [ (typeref [ (typename T1 []) ]) ])
                            ]))
                        (viewtype
                          (typeref [ (typename S []) ])
                          (typeref
                            [
                              (typename
                                Equatable
                                [ (typeref [ (typename T2 []) ]) ])
                            ]))
                      ]))
                  (assign (ref $0) (tuple [ (ref a) (ref b) ]))
                  (let $1 (infertype $135))
                  (assign (ref $1) (new () (ref $0)))
                  (ref $1)
                ]))
            (function
              ==
              (lambda
                []
                [
                  (param
                    self
                    (typeref
                      [
                        (typename
                          OrEquals
                          [
                            (typeref [ (typename T1 []) ])
                            (typeref [ (typename T2 []) ])
                          ])
                      ])
                    ())
                  (param
                    x
                    (uniontype
                      [
                        (typeref [ (typename T1 []) ])
                        (typeref [ (typename T2 []) ])
                      ])
                    ())
                ]
                (typeref [ (typename Bool []) ])
                [
                  (let $2 (infertype $138))
                  (assign
                    (ref $2)
                    (lambda
                      []
                      [ (param y (typeref [ (typename T1 []) ]) ()) ]
                      (infertype $28)
                      [
                        (free self)
                        (let $0 (infertype $136))
                        (assign
                          (ref $0)
                          (select (ref self) [ (typename a []) ] ()))
                        (let $1 (infertype $137))
                        (assign
                          (ref $1)
                          (select (ref $0) [ (typename == []) ] (ref y)))
                        (ref $1)
                      ]))
                  (let $5 (infertype $141))
                  (assign
                    (ref $5)
                    (lambda
                      []
                      [ (param y (typeref [ (typename T2 []) ]) ()) ]
                      (infertype $29)
                      [
                        (free self)
                        (let $3 (infertype $139))
                        (assign
                          (ref $3)
                          (select (ref self) [ (typename b []) ] ()))
                        (let $4 (infertype $140))
                        (assign
                          (ref $4)
                          (select (ref $3) [ (typename == []) ] (ref y)))
                        (ref $4)
                      ]))
                  (let $7 (infertype $143))
                  (assign
                    (ref $7)
                    (lambda
                      []
                      []
                      (infertype $30)
                      [
                        (let $6 (infertype $142))
                        (assign (ref $6) (bool false))
                        (ref $6)
                      ]))
                  (let $8 (infertype $144))
                  (assign
                    (ref $8)
                    (match (ref x) [ (ref $2) (ref $5) (ref $7) ]))
                  (ref $8)
                ]))
          ])
        (function
          |
          (lambda
            [ (typeparam T1 () ()) (typeparam T2 () ()) ]
            [
              (param
                e1
                (typeref
                  [ (typename Equatable [ (typeref [ (typename T1 []) ]) ]) ])
                ())
              (param
                e2
                (typeref
                  [ (typename Equatable [ (typeref [ (typename T2 []) ]) ]) ])
                ())
            ]
            (typeref
              [
                (typename
                  OrEquals
                  [
                    (typeref [ (typename T1 []) ])
                    (typeref [ (typename T2 []) ])
                  ])
              ])
            [
              (let
                $0
                (tupletype
                  [
                    (typeref
                      [
                        (typename Equatable [ (typeref [ (typename T1 []) ]) ])
                      ])
                    (typeref
                      [
                        (typename Equatable [ (typeref [ (typename T2 []) ]) ])
                      ])
                  ]))
              (assign (ref $0) (tuple [ (ref e1) (ref e2) ]))
              (let $1 (infertype $146))
              (assign
                (ref $1)
                (select
                  ()
                  [ (typename OrEquals []) (typename create []) ]
                  (ref $0)))
              (ref $1)
            ]))
        (class
          Return
          [ (typeparam T () ()) ]
          ()
          [
            (field value (typeref [ (typename T []) ]) ())
            (function
              create
              (lambda
                [
                  (typeparam
                    S
                    (typeref
                      [ (typename Return [ (typeref [ (typename T []) ]) ]) ])
                    ())
                ]
                [
                  (param
                    value
                    (viewtype
                      (typeref [ (typename S []) ])
                      (typeref [ (typename T []) ]))
                    ())
                ]
                (typeref [ (typename S []) ])
                [
                  (let $0 (infertype $147))
                  (assign (ref $0) (new () (ref value)))
                  (ref $0)
                ]))
          ])
        (class
          return
          [ (typeparam T () (typeref [ (typename None []) ])) ]
          ()
          [
            (function
              create
              (lambda
                []
                [
                  (param
                    x
                    (typeref [ (typename T []) ])
                    (lambda
                      []
                      []
                      (infertype $31)
                      [
                        (let $0 (infertype $148))
                        (assign
                          (ref $0)
                          (select
                            ()
                            [ (typename None []) (typename create []) ]
                            ()))
                        (ref $0)
                      ]))
                ]
                (throwtype
                  (typeref
                    [ (typename Return [ (typeref [ (typename T []) ]) ]) ]))
                [
                  (let $1 (infertype $149))
                  (assign
                    (ref $1)
                    (select
                      ()
                      [
                        (typename Return [ (typeref [ (typename T []) ]) ])
                        (typename create [])
                      ]
                      (ref x)))
                  (throw (ref $1))
                ]))
          ])
      ])
    (class
      $module-2
      []
      ()
      [
        (class
          Bool
          []
          ()
          [
            (function
              apply
              (lambda
                []
                [ (param self (typeref [ (typename Bool []) ]) ()) ]
                (typeref [ (typename Bool []) ])
                [ (ref self) ]))
            (function
              bool
              (lambda
                []
                [ (param self (typeref [ (typename Bool []) ]) ()) ]
                (typeref [ (typename Bool []) ])
                [ (ref self) ]))
            (function
              create
              (lambda
                []
                []
                (isecttype [ (typeref [ (typename Bool []) ]) (imm ) ])
                [
                  (let $0 (infertype $150))
                  (assign (ref $0) (new () ()))
                  (ref $0)
                ]))
          ])
        (interface
          ToBool
          []
          ()
          [
            (function
              bool
              (lambda
                []
                [ (param self (Self ) ()) ]
                (typeref [ (typename Bool []) ])
                []))
          ])
        (function
          and
          (lambda
            [
              (typeparam T (typeref [ (typename ToBool []) ]) ())
              (typeparam U () ())
            ]
            [
              (param a (typeref [ (typename T []) ]) ())
              (param
                b
                (functiontype (tupletype []) (typeref [ (typename U []) ]))
                ())
            ]
            (uniontype
              [ (typeref [ (typename T []) ]) (typeref [ (typename U []) ]) ])
            [
              (let $0 (infertype $151))
              (assign (ref $0) (select () [ (typename bool []) ] (ref a)))
              (let $4 (infertype $154))
              (assign
                (ref $4)
                (lambda
                  []
                  [ (param $1 () ()) ]
                  (infertype $32)
                  [
                    (let $2 (infertype $152))
                    (assign
                      (ref $2)
                      (select (param $1 () ()) [ (typename == []) ] (ref $1)))
                    (let $3 (infertype $153))
                    (assign
                      (ref $3)
                      (select () [ (typename requires []) ] (ref $2)))
                    (free a)
                    (ref a)
                  ]))
              (let $9 (infertype $158))
              (assign
                (ref $9)
                (lambda
                  []
                  [ (param $5 () ()) ]
                  (infertype $33)
                  [
                    (let $6 (infertype $155))
                    (assign
                      (ref $6)
                      (select (param $5 () ()) [ (typename == []) ] (ref $5)))
                    (let $7 (infertype $156))
                    (assign
                      (ref $7)
                      (select () [ (typename requires []) ] (ref $6)))
                    (free b)
                    (let $8 (infertype $157))
                    (assign
                      (ref $8)
                      (select (ref b) [ (typename apply []) ] ()))
                    (ref $8)
                  ]))
              (let $10 (infertype $159))
              (assign (ref $10) (match (ref $0) [ (ref $4) (ref $9) ]))
              (ref $10)
            ]))
        (function
          or
          (lambda
            [
              (typeparam T (typeref [ (typename ToBool []) ]) ())
              (typeparam U () ())
            ]
            [
              (param a (typeref [ (typename T []) ]) ())
              (param
                b
                (functiontype (tupletype []) (typeref [ (typename U []) ]))
                ())
            ]
            (uniontype
              [ (typeref [ (typename T []) ]) (typeref [ (typename U []) ]) ])
            [
              (let $0 (infertype $160))
              (assign (ref $0) (select () [ (typename bool []) ] (ref a)))
              (let $4 (infertype $163))
              (assign
                (ref $4)
                (lambda
                  []
                  [ (param $1 () ()) ]
                  (infertype $34)
                  [
                    (let $2 (infertype $161))
                    (assign
                      (ref $2)
                      (select (param $1 () ()) [ (typename == []) ] (ref $1)))
                    (let $3 (infertype $162))
                    (assign
                      (ref $3)
                      (select () [ (typename requires []) ] (ref $2)))
                    (free a)
                    (ref a)
                  ]))
              (let $9 (infertype $167))
              (assign
                (ref $9)
                (lambda
                  []
                  [ (param $5 () ()) ]
                  (infertype $35)
                  [
                    (let $6 (infertype $164))
                    (assign
                      (ref $6)
                      (select (param $5 () ()) [ (typename == []) ] (ref $5)))
                    (let $7 (infertype $165))
                    (assign
                      (ref $7)
                      (select () [ (typename requires []) ] (ref $6)))
                    (free b)
                    (let $8 (infertype $166))
                    (assign
                      (ref $8)
                      (select (ref b) [ (typename apply []) ] ()))
                    (ref $8)
                  ]))
              (let $10 (infertype $168))
              (assign (ref $10) (match (ref $0) [ (ref $4) (ref $9) ]))
              (ref $10)
            ]))
        (function
          not
          (lambda
            [ (typeparam T (typeref [ (typename ToBool []) ]) ()) ]
            [ (param a (typeref [ (typename T []) ]) ()) ]
            (typeref [ (typename Bool []) ])
            [
              (let $0 (infertype $169))
              (assign (ref $0) (select () [ (typename bool []) ] (ref a)))
              (let $5 (infertype $173))
              (assign
                (ref $5)
                (lambda
                  []
                  [ (param $1 () ()) ]
                  (infertype $36)
                  [
                    (let $2 (infertype $170))
                    (assign
                      (ref $2)
                      (select (param $1 () ()) [ (typename == []) ] (ref $1)))
                    (let $3 (infertype $171))
                    (assign
                      (ref $3)
                      (select () [ (typename requires []) ] (ref $2)))
                    (let $4 (infertype $172))
                    (assign (ref $4) (bool false))
                    (ref $4)
                  ]))
              (let $10 (infertype $177))
              (assign
                (ref $10)
                (lambda
                  []
                  [ (param $6 () ()) ]
                  (infertype $37)
                  [
                    (let $7 (infertype $174))
                    (assign
                      (ref $7)
                      (select (param $6 () ()) [ (typename == []) ] (ref $6)))
                    (let $8 (infertype $175))
                    (assign
                      (ref $8)
                      (select () [ (typename requires []) ] (ref $7)))
                    (let $9 (infertype $176))
                    (assign (ref $9) (bool true))
                    (ref $9)
                  ]))
              (let $11 (infertype $178))
              (assign (ref $11) (match (ref $0) [ (ref $5) (ref $10) ]))
              (ref $11)
            ]))
        (class
          Less
          []
          ()
          [
            (function
              create
              (lambda
                []
                []
                (isecttype [ (typeref [ (typename Less []) ]) (imm ) ])
                [
                  (let $0 (infertype $179))
                  (assign (ref $0) (new () ()))
                  (ref $0)
                ]))
          ])
        (class
          Equal
          []
          ()
          [
            (function
              create
              (lambda
                []
                []
                (isecttype [ (typeref [ (typename Equal []) ]) (imm ) ])
                [
                  (let $0 (infertype $180))
                  (assign (ref $0) (new () ()))
                  (ref $0)
                ]))
          ])
        (class
          Greater
          []
          ()
          [
            (function
              create
              (lambda
                []
                []
                (isecttype [ (typeref [ (typename Greater []) ]) (imm ) ])
                [
                  (let $0 (infertype $181))
                  (assign (ref $0) (new () ()))
                  (ref $0)
                ]))
          ])
        (typealias
          Compare
          []
          (uniontype
            [
              (typeref [ (typename Less []) ])
              (typeref [ (typename Equal []) ])
              (typeref [ (typename Greater []) ])
            ])
          [])
        (interface
          Equatable
          [ (typeparam T () ()) ]
          ()
          [
            (function
              ==
              (lambda
                []
                [
                  (param self (Self ) ())
                  (param other (typeref [ (typename T []) ]) ())
                ]
                (typeref [ (typename Bool []) ])
                []))
            (function
              !=
              (lambda
                []
                [
                  (param self (Self ) ())
                  (param other (typeref [ (typename T []) ]) ())
                ]
                (typeref [ (typename Bool []) ])
                [
                  (let $0 (infertype $182))
                  (assign
                    (ref $0)
                    (select (ref self) [ (typename == []) ] (ref other)))
                  (let $1 (infertype $183))
                  (assign (ref $1) (select () [ (typename not []) ] (ref $0)))
                  (ref $1)
                ]))
          ])
        (interface
          Comparable
          [ (typeparam T () ()) ]
          (typeref [ (typename Equatable [ (typeref [ (typename T []) ]) ]) ])
          [
            (function
              <
              (lambda
                []
                [
                  (param self (Self ) ())
                  (param other (typeref [ (typename T []) ]) ())
                ]
                (typeref [ (typename Bool []) ])
                []))
            (function
              <=
              (lambda
                []
                [
                  (param self (Self ) ())
                  (param other (typeref [ (typename T []) ]) ())
                ]
                (typeref [ (typename Bool []) ])
                [
                  (let $0 (infertype $184))
                  (assign
                    (ref $0)
                    (select (ref self) [ (typename < []) ] (ref other)))
                  (let $1 (infertype $185))
                  (assign
                    (ref $1)
                    (select (ref self) [ (typename == []) ] (ref other)))
                  (let $2 (infertype $186))
                  (assign
                    (ref $2)
                    (select (ref $0) [ (typename or []) ] (ref $1)))
                  (ref $2)
                ]))
            (function
              >=
              (lambda
                []
                [
                  (param self (Self ) ())
                  (param other (typeref [ (typename T []) ]) ())
                ]
                (typeref [ (typename Bool []) ])
                [
                  (let $0 (infertype $187))
                  (assign
                    (ref $0)
                    (select (ref self) [ (typename < []) ] (ref other)))
                  (let $1 (infertype $188))
                  (assign (ref $1) (select () [ (typename not []) ] (ref $0)))
                  (ref $1)
                ]))
            (function
              >
              (lambda
                []
                [
                  (param self (Self ) ())
                  (param other (typeref [ (typename T []) ]) ())
                ]
                (typeref [ (typename Bool []) ])
                [
                  (let $0 (infertype $189))
                  (assign
                    (ref $0)
                    (select (ref self) [ (typename <= []) ] (ref other)))
                  (let $1 (infertype $190))
                  (assign (ref $1) (select () [ (typename not []) ] (ref $0)))
                  (ref $1)
                ]))
            (function
              <=>
              (lambda
                []
                [
                  (param self (Self ) ())
                  (param other (typeref [ (typename T []) ]) ())
                ]
                (typeref [ (typename Compare []) ])
                [
                  (let $0 (infertype $191))
                  (assign
                    (ref $0)
                    (select (ref self) [ (typename < []) ] (ref other)))
                  (let $1 (infertype $192))
                  (assign (ref $1) (select () [ (typename if []) ] (ref $0)))
                  (let $3 (infertype $194))
                  (assign
                    (ref $3)
                    (lambda
                      []
                      []
                      (infertype $38)
                      [
                        (let $2 (infertype $193))
                        (assign
                          (ref $2)
                          (select
                            ()
                            [ (typename Less []) (typename create []) ]
                            ()))
                        (ref $2)
                      ]))
                  (let $4 (infertype $195))
                  (assign
                    (ref $4)
                    (select (ref $1) [ (typename apply []) ] (ref $3)))
                  (let $5 (infertype $196))
                  (assign
                    (ref $5)
                    (select (ref self) [ (typename == []) ] (ref other)))
                  (let $6 (infertype $197))
                  (assign
                    (ref $6)
                    (select (ref $4) [ (typename elseif []) ] (ref $5)))
                  (let $8 (infertype $199))
                  (assign
                    (ref $8)
                    (lambda
                      []
                      []
                      (infertype $39)
                      [
                        (let $7 (infertype $198))
                        (assign
                          (ref $7)
                          (select
                            ()
                            [ (typename Equal []) (typename create []) ]
                            ()))
                        (ref $7)
                      ]))
                  (let $9 (infertype $200))
                  (assign
                    (ref $9)
                    (select (ref $6) [ (typename apply []) ] (ref $8)))
                  (let $11 (infertype $202))
                  (assign
                    (ref $11)
                    (lambda
                      []
                      []
                      (infertype $40)
                      [
                        (let $10 (infertype $201))
                        (assign
                          (ref $10)
                          (select
                            ()
                            [ (typename Greater []) (typename create []) ]
                            ()))
                        (ref $10)
                      ]))
                  (let $12 (infertype $203))
                  (assign
                    (ref $12)
                    (select (ref $9) [ (typename else []) ] (ref $11)))
                  (ref $12)
                ]))
          ])
      ])
  ])
